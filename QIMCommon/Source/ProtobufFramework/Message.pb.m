// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Message.pb.h"
#import "IQMessage+Utility.h"

// @@protoc_insertion_point(imports)

@implementation MessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL SignalTypeIsValidValue(SignalType value) {
  switch (value) {
    case SignalTypeSignalTypePresence:
    case SignalTypeSignalTypeIq:
    case SignalTypeSignalTypeIqresponse:
    case SignalTypeSignalTypeSucceededResponse:
    case SignalTypeSignalTypeFailureResponse:
    case SignalTypeSignalTypeChat:
    case SignalTypeSignalTypeGroupChat:
    case SignalTypeSignalTypeNormal:
    case SignalTypeSignalTypeError:
    case SignalTypeSignalTypeTyping:
    case SignalTypeSignalTypeNote:
    case SignalTypeSignalTypeTransfor:
    case SignalTypeSignalTypeReadmark:
    case SignalTypeSignalTypeRevoke:
    case SignalTypeSignalTypeSubscription:
    case SignalTypeSignalTypeMstate:
    case SignalTypeSignalTypeHeadline:
    case SignalTypeSignalTypeShareLocation:
    case SignalTypeSignalTypeHeartBeat:
    case SignalTypeSignalTypeAuth:
    case SignalTypeSignalTypeStreamBegin:
    case SignalTypeSignalTypeStreamEnd:
    case SignalTypeSignalTypeWelcome:
    case SignalTypeSignalTypeUserConnect:
    case SignalTypeSignalTypeChallenge:
    case SignalTypeSignalStartTls:
    case SignalTypeSignalProceedTls:
    case SignalTypeSignalTypeWebRtc:
    case SignalTypeSignalTypeCarbon:
    case SignalTypeSignalTypeConsult:
    case SignalTypeSignalTypeEncryption:
    case SignalTypeSignalTypeCollection:
    case SignalTypeSignalTypeTrans:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromSignalType(SignalType value) {
  switch (value) {
    case SignalTypeSignalTypePresence:
      return @"SignalTypeSignalTypePresence";
    case SignalTypeSignalTypeIq:
      return @"SignalTypeSignalTypeIq";
    case SignalTypeSignalTypeIqresponse:
      return @"SignalTypeSignalTypeIqresponse";
    case SignalTypeSignalTypeSucceededResponse:
      return @"SignalTypeSignalTypeSucceededResponse";
    case SignalTypeSignalTypeFailureResponse:
      return @"SignalTypeSignalTypeFailureResponse";
    case SignalTypeSignalTypeChat:
      return @"SignalTypeSignalTypeChat";
    case SignalTypeSignalTypeGroupChat:
      return @"SignalTypeSignalTypeGroupChat";
    case SignalTypeSignalTypeNormal:
      return @"SignalTypeSignalTypeNormal";
    case SignalTypeSignalTypeError:
      return @"SignalTypeSignalTypeError";
    case SignalTypeSignalTypeTyping:
      return @"SignalTypeSignalTypeTyping";
    case SignalTypeSignalTypeNote:
      return @"SignalTypeSignalTypeNote";
    case SignalTypeSignalTypeTransfor:
      return @"SignalTypeSignalTypeTransfor";
    case SignalTypeSignalTypeReadmark:
      return @"SignalTypeSignalTypeReadmark";
    case SignalTypeSignalTypeRevoke:
      return @"SignalTypeSignalTypeRevoke";
    case SignalTypeSignalTypeSubscription:
      return @"SignalTypeSignalTypeSubscription";
    case SignalTypeSignalTypeMstate:
      return @"SignalTypeSignalTypeMstate";
    case SignalTypeSignalTypeHeadline:
      return @"SignalTypeSignalTypeHeadline";
    case SignalTypeSignalTypeShareLocation:
      return @"SignalTypeSignalTypeShareLocation";
    case SignalTypeSignalTypeHeartBeat:
      return @"SignalTypeSignalTypeHeartBeat";
    case SignalTypeSignalTypeAuth:
      return @"SignalTypeSignalTypeAuth";
    case SignalTypeSignalTypeStreamBegin:
      return @"SignalTypeSignalTypeStreamBegin";
    case SignalTypeSignalTypeStreamEnd:
      return @"SignalTypeSignalTypeStreamEnd";
    case SignalTypeSignalTypeWelcome:
      return @"SignalTypeSignalTypeWelcome";
    case SignalTypeSignalTypeUserConnect:
      return @"SignalTypeSignalTypeUserConnect";
    case SignalTypeSignalTypeChallenge:
      return @"SignalTypeSignalTypeChallenge";
    case SignalTypeSignalStartTls:
      return @"SignalTypeSignalStartTls";
    case SignalTypeSignalProceedTls:
      return @"SignalTypeSignalProceedTls";
    case SignalTypeSignalTypeWebRtc:
      return @"SignalTypeSignalTypeWebRtc";
    case SignalTypeSignalTypeCarbon:
      return @"SignalTypeSignalTypeCarbon";
    case SignalTypeSignalTypeConsult:
      return @"SignalTypeSignalTypeConsult";
    case SignalTypeSignalTypeEncryption:
      return @"SignalTypeSignalTypeEncryption";
    case SignalTypeSignalTypeCollection:
      return @"SignalTypeSignalTypeCollection";
    case SignalTypeSignalTypeTrans:
      return @"SignalTypeSignalTypeTrans";
    default:
      return nil;
  }
}

BOOL ClientTypeIsValidValue(ClientType value) {
  switch (value) {
    case ClientTypeClientTypeMac:
    case ClientTypeClientTypeiOs:
    case ClientTypeClientTypePc:
    case ClientTypeClientTypeAndroid:
    case ClientTypeClientTypeLinux:
    case ClientTypeClientTypeWeb:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromClientType(ClientType value) {
  switch (value) {
    case ClientTypeClientTypeMac:
      return @"ClientTypeClientTypeMac";
    case ClientTypeClientTypeiOs:
      return @"ClientTypeClientTypeiOs";
    case ClientTypeClientTypePc:
      return @"ClientTypeClientTypePc";
    case ClientTypeClientTypeAndroid:
      return @"ClientTypeClientTypeAndroid";
    case ClientTypeClientTypeLinux:
      return @"ClientTypeClientTypeLinux";
    case ClientTypeClientTypeWeb:
      return @"ClientTypeClientTypeWeb";
    default:
      return nil;
  }
}

BOOL MessageTypeIsValidValue(MessageType value) {
  switch (value) {
    case MessageTypeMessageTypePnote:
    case MessageTypeMessageTypeRevoke:
    case MessageTypeMessageTypeText:
    case MessageTypeMessageTypeVoice:
    case MessageTypeMessageTypePhoto:
    case MessageTypeMessageTypeSogouIcon:
    case MessageTypeMessageTypeFile:
    case MessageTypeMessageTypeTopic:
    case MessageTypeMessageTypeRichText:
    case MessageTypeMessageTypeActionRichText:
    case MessageTypeMessageTypeReply:
    case MessageTypeMessageTypeShock:
    case MessageTypeMessageTypeNote:
    case MessageTypeMessageTypeGroupAt:
    case MessageTypeMessageTypeGroupNotify:
    case MessageTypeMessageTypeLocalShare:
    case MessageTypeMessageTypeWebRtcaudio:
    case MessageTypeMessageTypeWebRtcvidio:
    case MessageTypeMessageTypeImageNew:
    case MessageTypeMessageTypeSmallVideo:
    case MessageTypeMessageTypeRobotAnswer:
    case MessageTypeMessageTypeSourceCode:
    case MessageTypeMessageTypeTime:
    case MessageTypeMessageTypeBurnAfterRead:
    case MessageTypeMessageTypeCardShare:
    case MessageTypeMessageTypeMeetingRemind:
    case MessageTypeMessageTypeActivity:
    case MessageTypeMessageTypeRedPack:
    case MessageTypeMessageTypeAa:
    case MessageTypeMessageTypeCommonTrdInfo:
    case MessageTypeMessageTypeCommonProductInfo:
    case MessageTypeMessageTypeRedPackInfo:
    case MessageTypeMessageTypeAainfo:
    case MessageTypeMessageTypeConsult:
    case MessageTypeMessageTypeConsultResult:
    case MessageTypeMessageTypeGrabMenuVcard:
    case MessageTypeMessageTypeGrabMenuResult:
    case MessageTypeMessageTypeQczhongbao:
    case MessageTypeMessageTypeMicroTourGuide:
    case MessageTypeMessageTypeProduct:
    case MessageTypeMessageTypeShareLocation:
    case MessageTypeMessageTypeTransNormal:
    case MessageTypeMessageTypeNotice:
    case MessageTypeWebRtcMsgTypeAudio:
    case MessageTypeWebRtcMsgTypeLive:
    case MessageTypeWebRtcMsgTypeVideo:
    case MessageTypeMessageTypeRobotQuestionList:
    case MessageTypeMessageTypeRobotTurnToUser:
    case MessageTypeWebRtcMsgTypeVideoMeeting:
    case MessageTypeMessageTypeMarkdown:
    case MessageTypeMessageTypeSystem:
    case MessageTypeMediaTypeSystemLy:
    case MessageTypeMessageTypeEncrypt:
    case MessageTypeMessageTypeTransChatToCustomer:
    case MessageTypeMessageTypeTransChatToCustomerFeedback:
    case MessageTypeMessageTypeTransChatToCustomerService:
    case MessageTypeMessageTypeTransChatToCustomerServiceFeedback:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromMessageType(MessageType value) {
  switch (value) {
    case MessageTypeMessageTypePnote:
      return @"MessageTypeMessageTypePnote";
    case MessageTypeMessageTypeRevoke:
      return @"MessageTypeMessageTypeRevoke";
    case MessageTypeMessageTypeText:
      return @"MessageTypeMessageTypeText";
    case MessageTypeMessageTypeVoice:
      return @"MessageTypeMessageTypeVoice";
    case MessageTypeMessageTypePhoto:
      return @"MessageTypeMessageTypePhoto";
    case MessageTypeMessageTypeSogouIcon:
      return @"MessageTypeMessageTypeSogouIcon";
    case MessageTypeMessageTypeFile:
      return @"MessageTypeMessageTypeFile";
    case MessageTypeMessageTypeTopic:
      return @"MessageTypeMessageTypeTopic";
    case MessageTypeMessageTypeRichText:
      return @"MessageTypeMessageTypeRichText";
    case MessageTypeMessageTypeActionRichText:
      return @"MessageTypeMessageTypeActionRichText";
    case MessageTypeMessageTypeReply:
      return @"MessageTypeMessageTypeReply";
    case MessageTypeMessageTypeShock:
      return @"MessageTypeMessageTypeShock";
    case MessageTypeMessageTypeNote:
      return @"MessageTypeMessageTypeNote";
    case MessageTypeMessageTypeGroupAt:
      return @"MessageTypeMessageTypeGroupAt";
    case MessageTypeMessageTypeGroupNotify:
      return @"MessageTypeMessageTypeGroupNotify";
    case MessageTypeMessageTypeLocalShare:
      return @"MessageTypeMessageTypeLocalShare";
    case MessageTypeMessageTypeWebRtcaudio:
      return @"MessageTypeMessageTypeWebRtcaudio";
    case MessageTypeMessageTypeWebRtcvidio:
      return @"MessageTypeMessageTypeWebRtcvidio";
    case MessageTypeMessageTypeImageNew:
      return @"MessageTypeMessageTypeImageNew";
    case MessageTypeMessageTypeSmallVideo:
      return @"MessageTypeMessageTypeSmallVideo";
    case MessageTypeMessageTypeRobotAnswer:
      return @"MessageTypeMessageTypeRobotAnswer";
    case MessageTypeMessageTypeSourceCode:
      return @"MessageTypeMessageTypeSourceCode";
    case MessageTypeMessageTypeTime:
      return @"MessageTypeMessageTypeTime";
    case MessageTypeMessageTypeBurnAfterRead:
      return @"MessageTypeMessageTypeBurnAfterRead";
    case MessageTypeMessageTypeCardShare:
      return @"MessageTypeMessageTypeCardShare";
    case MessageTypeMessageTypeMeetingRemind:
      return @"MessageTypeMessageTypeMeetingRemind";
    case MessageTypeMessageTypeActivity:
      return @"MessageTypeMessageTypeActivity";
    case MessageTypeMessageTypeRedPack:
      return @"MessageTypeMessageTypeRedPack";
    case MessageTypeMessageTypeAa:
      return @"MessageTypeMessageTypeAa";
    case MessageTypeMessageTypeCommonTrdInfo:
      return @"MessageTypeMessageTypeCommonTrdInfo";
    case MessageTypeMessageTypeCommonProductInfo:
      return @"MessageTypeMessageTypeCommonProductInfo";
    case MessageTypeMessageTypeRedPackInfo:
      return @"MessageTypeMessageTypeRedPackInfo";
    case MessageTypeMessageTypeAainfo:
      return @"MessageTypeMessageTypeAainfo";
    case MessageTypeMessageTypeConsult:
      return @"MessageTypeMessageTypeConsult";
    case MessageTypeMessageTypeConsultResult:
      return @"MessageTypeMessageTypeConsultResult";
    case MessageTypeMessageTypeGrabMenuVcard:
      return @"MessageTypeMessageTypeGrabMenuVcard";
    case MessageTypeMessageTypeGrabMenuResult:
      return @"MessageTypeMessageTypeGrabMenuResult";
    case MessageTypeMessageTypeQczhongbao:
      return @"MessageTypeMessageTypeQczhongbao";
    case MessageTypeMessageTypeMicroTourGuide:
      return @"MessageTypeMessageTypeMicroTourGuide";
    case MessageTypeMessageTypeProduct:
      return @"MessageTypeMessageTypeProduct";
    case MessageTypeMessageTypeShareLocation:
      return @"MessageTypeMessageTypeShareLocation";
    case MessageTypeMessageTypeTransNormal:
      return @"MessageTypeMessageTypeTransNormal";
    case MessageTypeMessageTypeNotice:
      return @"MessageTypeMessageTypeNotice";
    case MessageTypeWebRtcMsgTypeAudio:
      return @"MessageTypeWebRtcMsgTypeAudio";
    case MessageTypeWebRtcMsgTypeLive:
      return @"MessageTypeWebRtcMsgTypeLive";
    case MessageTypeWebRtcMsgTypeVideo:
      return @"MessageTypeWebRtcMsgTypeVideo";
    case MessageTypeMessageTypeRobotQuestionList:
      return @"MessageTypeMessageTypeRobotQuestionList";
    case MessageTypeMessageTypeRobotTurnToUser:
      return @"MessageTypeMessageTypeRobotTurnToUser";
    case MessageTypeWebRtcMsgTypeVideoMeeting:
      return @"MessageTypeWebRtcMsgTypeVideoMeeting";
    case MessageTypeMessageTypeMarkdown:
      return @"MessageTypeMessageTypeMarkdown";
    case MessageTypeMessageTypeSystem:
      return @"MessageTypeMessageTypeSystem";
    case MessageTypeMediaTypeSystemLy:
      return @"MessageTypeMediaTypeSystemLy";
    case MessageTypeMessageTypeEncrypt:
      return @"MessageTypeMessageTypeEncrypt";
    case MessageTypeMessageTypeTransChatToCustomer:
      return @"MessageTypeMessageTypeTransChatToCustomer";
    case MessageTypeMessageTypeTransChatToCustomerFeedback:
      return @"MessageTypeMessageTypeTransChatToCustomerFeedback";
    case MessageTypeMessageTypeTransChatToCustomerService:
      return @"MessageTypeMessageTypeTransChatToCustomerService";
    case MessageTypeMessageTypeTransChatToCustomerServiceFeedback:
      return @"MessageTypeMessageTypeTransChatToCustomerServiceFeedback";
    default:
      return nil;
  }
}

BOOL StringHeaderTypeIsValidValue(StringHeaderType value) {
  switch (value) {
    case StringHeaderTypeStringHeaderTypeChatId:
    case StringHeaderTypeStringHeaderTypeChannelId:
    case StringHeaderTypeStringHeaderTypeExtendInfo:
    case StringHeaderTypeStringHeaderTypeBackupInfo:
    case StringHeaderTypeStringHeaderTypeReadType:
    case StringHeaderTypeStringHeaderTypeJid:
    case StringHeaderTypeStringHeaderTypeRealJid:
    case StringHeaderTypeStringHeaderTypeInviteJid:
    case StringHeaderTypeStringHeaderTypeDeleleJid:
    case StringHeaderTypeStringHeaderTypeNick:
    case StringHeaderTypeStringHeaderTypeTitle:
    case StringHeaderTypeStringHeaderTypePic:
    case StringHeaderTypeStringHeaderTypeVersion:
    case StringHeaderTypeStringHeaderTypeMethod:
    case StringHeaderTypeStringHeaderTypeBody:
    case StringHeaderTypeStringHeaderTypeAffiliation:
    case StringHeaderTypeStringHeaderTypeType:
    case StringHeaderTypeStringHeaderTypeResult:
    case StringHeaderTypeStringHeaderTypeReason:
    case StringHeaderTypeStringHeaderTypeRole:
    case StringHeaderTypeStringHeaderTypeDomain:
    case StringHeaderTypeStringHeaderTypeStatus:
    case StringHeaderTypeStringHeaderTypeCode:
    case StringHeaderTypeStringHeaderTypeCdata:
    case StringHeaderTypeStringHeaderTypeTimeValue:
    case StringHeaderTypeStringHeaderTypeKeyValue:
    case StringHeaderTypeStringHeaderTypeName:
    case StringHeaderTypeStringHeaderTypeHost:
    case StringHeaderTypeStringHeaderTypeQuestion:
    case StringHeaderTypeStringHeaderTypeAnswer:
    case StringHeaderTypeStringHeaderTypeFriends:
    case StringHeaderTypeStringHeaderTypeValue:
    case StringHeaderTypeStringHeaderTypeMaskedUuser:
    case StringHeaderTypeStringHeaderTypeKey:
    case StringHeaderTypeStringHeaderTypeCarbon:
    case StringHeaderTypeStringHeaderTypeMode:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromStringHeaderType(StringHeaderType value) {
  switch (value) {
    case StringHeaderTypeStringHeaderTypeChatId:
      return @"StringHeaderTypeStringHeaderTypeChatId";
    case StringHeaderTypeStringHeaderTypeChannelId:
      return @"StringHeaderTypeStringHeaderTypeChannelId";
    case StringHeaderTypeStringHeaderTypeExtendInfo:
      return @"StringHeaderTypeStringHeaderTypeExtendInfo";
    case StringHeaderTypeStringHeaderTypeBackupInfo:
      return @"StringHeaderTypeStringHeaderTypeBackupInfo";
    case StringHeaderTypeStringHeaderTypeReadType:
      return @"StringHeaderTypeStringHeaderTypeReadType";
    case StringHeaderTypeStringHeaderTypeJid:
      return @"StringHeaderTypeStringHeaderTypeJid";
    case StringHeaderTypeStringHeaderTypeRealJid:
      return @"StringHeaderTypeStringHeaderTypeRealJid";
    case StringHeaderTypeStringHeaderTypeInviteJid:
      return @"StringHeaderTypeStringHeaderTypeInviteJid";
    case StringHeaderTypeStringHeaderTypeDeleleJid:
      return @"StringHeaderTypeStringHeaderTypeDeleleJid";
    case StringHeaderTypeStringHeaderTypeNick:
      return @"StringHeaderTypeStringHeaderTypeNick";
    case StringHeaderTypeStringHeaderTypeTitle:
      return @"StringHeaderTypeStringHeaderTypeTitle";
    case StringHeaderTypeStringHeaderTypePic:
      return @"StringHeaderTypeStringHeaderTypePic";
    case StringHeaderTypeStringHeaderTypeVersion:
      return @"StringHeaderTypeStringHeaderTypeVersion";
    case StringHeaderTypeStringHeaderTypeMethod:
      return @"StringHeaderTypeStringHeaderTypeMethod";
    case StringHeaderTypeStringHeaderTypeBody:
      return @"StringHeaderTypeStringHeaderTypeBody";
    case StringHeaderTypeStringHeaderTypeAffiliation:
      return @"StringHeaderTypeStringHeaderTypeAffiliation";
    case StringHeaderTypeStringHeaderTypeType:
      return @"StringHeaderTypeStringHeaderTypeType";
    case StringHeaderTypeStringHeaderTypeResult:
      return @"StringHeaderTypeStringHeaderTypeResult";
    case StringHeaderTypeStringHeaderTypeReason:
      return @"StringHeaderTypeStringHeaderTypeReason";
    case StringHeaderTypeStringHeaderTypeRole:
      return @"StringHeaderTypeStringHeaderTypeRole";
    case StringHeaderTypeStringHeaderTypeDomain:
      return @"StringHeaderTypeStringHeaderTypeDomain";
    case StringHeaderTypeStringHeaderTypeStatus:
      return @"StringHeaderTypeStringHeaderTypeStatus";
    case StringHeaderTypeStringHeaderTypeCode:
      return @"StringHeaderTypeStringHeaderTypeCode";
    case StringHeaderTypeStringHeaderTypeCdata:
      return @"StringHeaderTypeStringHeaderTypeCdata";
    case StringHeaderTypeStringHeaderTypeTimeValue:
      return @"StringHeaderTypeStringHeaderTypeTimeValue";
    case StringHeaderTypeStringHeaderTypeKeyValue:
      return @"StringHeaderTypeStringHeaderTypeKeyValue";
    case StringHeaderTypeStringHeaderTypeName:
      return @"StringHeaderTypeStringHeaderTypeName";
    case StringHeaderTypeStringHeaderTypeHost:
      return @"StringHeaderTypeStringHeaderTypeHost";
    case StringHeaderTypeStringHeaderTypeQuestion:
      return @"StringHeaderTypeStringHeaderTypeQuestion";
    case StringHeaderTypeStringHeaderTypeAnswer:
      return @"StringHeaderTypeStringHeaderTypeAnswer";
    case StringHeaderTypeStringHeaderTypeFriends:
      return @"StringHeaderTypeStringHeaderTypeFriends";
    case StringHeaderTypeStringHeaderTypeValue:
      return @"StringHeaderTypeStringHeaderTypeValue";
    case StringHeaderTypeStringHeaderTypeMaskedUuser:
      return @"StringHeaderTypeStringHeaderTypeMaskedUuser";
    case StringHeaderTypeStringHeaderTypeKey:
      return @"StringHeaderTypeStringHeaderTypeKey";
    case StringHeaderTypeStringHeaderTypeCarbon:
      return @"StringHeaderTypeStringHeaderTypeCarbon";
    case StringHeaderTypeStringHeaderTypeMode:
      return @"StringHeaderTypeStringHeaderTypeMode";
    default:
      return nil;
  }
}

BOOL IQMessageKeyTypeIsValidValue(IQMessageKeyType value) {
  switch (value) {
    case IQMessageKeyTypeIqkeyBind:
    case IQMessageKeyTypeIqkeyMucCreate:
    case IQMessageKeyTypeIqkeyMucCreateV2:
    case IQMessageKeyTypeIqkeyMucInviteV2:
    case IQMessageKeyTypeIqkeyGetMucUser:
    case IQMessageKeyTypeIqkeySetMucUser:
    case IQMessageKeyTypeIqkeyDelMucUser:
    case IQMessageKeyTypeIqkeyAddUserSubscribe:
    case IQMessageKeyTypeIqkeyDelUserSubscribe:
    case IQMessageKeyTypeIqkeyGetUserSubScribe:
    case IQMessageKeyTypeIqkeyGetVerifyFriendOpt:
    case IQMessageKeyTypeIqkeySetVerifyFriendOpt:
    case IQMessageKeyTypeIqkeySetUserSubScribeV2:
    case IQMessageKeyTypeIqkeyGetUserSubScribeV2:
    case IQMessageKeyTypeIqkeyGetUserFriend:
    case IQMessageKeyTypeIqkeyDelUserFriend:
    case IQMessageKeyTypeIqkeyGetUserKey:
    case IQMessageKeyTypeIqkeyGetUserMask:
    case IQMessageKeyTypeIqkeySetUserMask:
    case IQMessageKeyTypeIqkeyCancelUserMask:
    case IQMessageKeyTypeIqkeySetAdmin:
    case IQMessageKeyTypeIqkeySetMember:
    case IQMessageKeyTypeIqkeyCancelMember:
    case IQMessageKeyTypeIqkeyGetUserMucs:
    case IQMessageKeyTypeIqkeyDestroyMuc:
    case IQMessageKeyTypeIqkeyPing:
    case IQMessageKeyTypeIqkeyAddPush:
    case IQMessageKeyTypeIqkeyCancelPush:
    case IQMessageKeyTypeIqkeyResult:
    case IQMessageKeyTypeIqkeyError:
    case IQMessageKeyTypeIqkeyGetVuser:
    case IQMessageKeyTypeIqkeyGetVuserRole:
    case IQMessageKeyTypeIqkeyStartSession:
    case IQMessageKeyTypeIqkeyEndSession:
    case IQMessageKeyTypeIqkeySessionEvent:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromIQMessageKeyType(IQMessageKeyType value) {
  switch (value) {
    case IQMessageKeyTypeIqkeyBind:
      return @"IQMessageKeyTypeIqkeyBind";
    case IQMessageKeyTypeIqkeyMucCreate:
      return @"IQMessageKeyTypeIqkeyMucCreate";
    case IQMessageKeyTypeIqkeyMucCreateV2:
      return @"IQMessageKeyTypeIqkeyMucCreateV2";
    case IQMessageKeyTypeIqkeyMucInviteV2:
      return @"IQMessageKeyTypeIqkeyMucInviteV2";
    case IQMessageKeyTypeIqkeyGetMucUser:
      return @"IQMessageKeyTypeIqkeyGetMucUser";
    case IQMessageKeyTypeIqkeySetMucUser:
      return @"IQMessageKeyTypeIqkeySetMucUser";
    case IQMessageKeyTypeIqkeyDelMucUser:
      return @"IQMessageKeyTypeIqkeyDelMucUser";
    case IQMessageKeyTypeIqkeyAddUserSubscribe:
      return @"IQMessageKeyTypeIqkeyAddUserSubscribe";
    case IQMessageKeyTypeIqkeyDelUserSubscribe:
      return @"IQMessageKeyTypeIqkeyDelUserSubscribe";
    case IQMessageKeyTypeIqkeyGetUserSubScribe:
      return @"IQMessageKeyTypeIqkeyGetUserSubScribe";
    case IQMessageKeyTypeIqkeyGetVerifyFriendOpt:
      return @"IQMessageKeyTypeIqkeyGetVerifyFriendOpt";
    case IQMessageKeyTypeIqkeySetVerifyFriendOpt:
      return @"IQMessageKeyTypeIqkeySetVerifyFriendOpt";
    case IQMessageKeyTypeIqkeySetUserSubScribeV2:
      return @"IQMessageKeyTypeIqkeySetUserSubScribeV2";
    case IQMessageKeyTypeIqkeyGetUserSubScribeV2:
      return @"IQMessageKeyTypeIqkeyGetUserSubScribeV2";
    case IQMessageKeyTypeIqkeyGetUserFriend:
      return @"IQMessageKeyTypeIqkeyGetUserFriend";
    case IQMessageKeyTypeIqkeyDelUserFriend:
      return @"IQMessageKeyTypeIqkeyDelUserFriend";
    case IQMessageKeyTypeIqkeyGetUserKey:
      return @"IQMessageKeyTypeIqkeyGetUserKey";
    case IQMessageKeyTypeIqkeyGetUserMask:
      return @"IQMessageKeyTypeIqkeyGetUserMask";
    case IQMessageKeyTypeIqkeySetUserMask:
      return @"IQMessageKeyTypeIqkeySetUserMask";
    case IQMessageKeyTypeIqkeyCancelUserMask:
      return @"IQMessageKeyTypeIqkeyCancelUserMask";
    case IQMessageKeyTypeIqkeySetAdmin:
      return @"IQMessageKeyTypeIqkeySetAdmin";
    case IQMessageKeyTypeIqkeySetMember:
      return @"IQMessageKeyTypeIqkeySetMember";
    case IQMessageKeyTypeIqkeyCancelMember:
      return @"IQMessageKeyTypeIqkeyCancelMember";
    case IQMessageKeyTypeIqkeyGetUserMucs:
      return @"IQMessageKeyTypeIqkeyGetUserMucs";
    case IQMessageKeyTypeIqkeyDestroyMuc:
      return @"IQMessageKeyTypeIqkeyDestroyMuc";
    case IQMessageKeyTypeIqkeyPing:
      return @"IQMessageKeyTypeIqkeyPing";
    case IQMessageKeyTypeIqkeyAddPush:
      return @"IQMessageKeyTypeIqkeyAddPush";
    case IQMessageKeyTypeIqkeyCancelPush:
      return @"IQMessageKeyTypeIqkeyCancelPush";
    case IQMessageKeyTypeIqkeyResult:
      return @"IQMessageKeyTypeIqkeyResult";
    case IQMessageKeyTypeIqkeyError:
      return @"IQMessageKeyTypeIqkeyError";
    case IQMessageKeyTypeIqkeyGetVuser:
      return @"IQMessageKeyTypeIqkeyGetVuser";
    case IQMessageKeyTypeIqkeyGetVuserRole:
      return @"IQMessageKeyTypeIqkeyGetVuserRole";
    case IQMessageKeyTypeIqkeyStartSession:
      return @"IQMessageKeyTypeIqkeyStartSession";
    case IQMessageKeyTypeIqkeyEndSession:
      return @"IQMessageKeyTypeIqkeyEndSession";
    case IQMessageKeyTypeIqkeySessionEvent:
      return @"IQMessageKeyTypeIqkeySessionEvent";
    default:
      return nil;
  }
}

BOOL StreamEndCodeIsValidValue(StreamEndCode value) {
  switch (value) {
    case StreamEndCodeStreamEndCodeReloginBase:
    case StreamEndCodeStreamEndCodeReloginFromNav:
    case StreamEndCodeStreamEndCodeNoReloginBase:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromStreamEndCode(StreamEndCode value) {
  switch (value) {
    case StreamEndCodeStreamEndCodeReloginBase:
      return @"StreamEndCodeStreamEndCodeReloginBase";
    case StreamEndCodeStreamEndCodeReloginFromNav:
      return @"StreamEndCodeStreamEndCodeReloginFromNav";
    case StreamEndCodeStreamEndCodeNoReloginBase:
      return @"StreamEndCodeStreamEndCodeNoReloginBase";
    default:
      return nil;
  }
}

BOOL CategoryTypeIsValidValue(CategoryType value) {
  switch (value) {
    case CategoryTypeCategoryOrganizational:
    case CategoryTypeCategorySessionList:
    case CategoryTypeCategoryNavigation:
    case CategoryTypeCategoryOpsnotification:
    case CategoryTypeCategoryConfigSync:
    case CategoryTypeCategoryMsgNotify:
    case CategoryTypeCategoryCalendarSync:
    case CategoryTypeCategoryOnlineClientSync:
    case CategoryTypeCategoryAskLog:
    case CategoryTypeCategoryTickUser:
    case CategoryTypeCategoryGlobalNotification:
    case CategoryTypeCategorySpecifyNotification:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromCategoryType(CategoryType value) {
  switch (value) {
    case CategoryTypeCategoryOrganizational:
      return @"CategoryTypeCategoryOrganizational";
    case CategoryTypeCategorySessionList:
      return @"CategoryTypeCategorySessionList";
    case CategoryTypeCategoryNavigation:
      return @"CategoryTypeCategoryNavigation";
    case CategoryTypeCategoryOpsnotification:
      return @"CategoryTypeCategoryOpsnotification";
    case CategoryTypeCategoryConfigSync:
      return @"CategoryTypeCategoryConfigSync";
    case CategoryTypeCategoryMsgNotify:
      return @"CategoryTypeCategoryMsgNotify";
    case CategoryTypeCategoryCalendarSync:
      return @"CategoryTypeCategoryCalendarSync";
    case CategoryTypeCategoryOnlineClientSync:
      return @"CategoryTypeCategoryOnlineClientSync";
    case CategoryTypeCategoryAskLog:
      return @"CategoryTypeCategoryAskLog";
    case CategoryTypeCategoryTickUser:
      return @"CategoryTypeCategoryTickUser";
    case CategoryTypeCategoryGlobalNotification:
      return @"CategoryTypeCategoryGlobalNotification";
    case CategoryTypeCategorySpecifyNotification:
      return @"CategoryTypeCategorySpecifyNotification";
    default:
      return nil;
  }
}

BOOL PresenceKeyTypeIsValidValue(PresenceKeyType value) {
  switch (value) {
    case PresenceKeyTypePresenceKeyPriority:
    case PresenceKeyTypePresenceKeyVerifyFriend:
    case PresenceKeyTypePresenceKeyManualAuthenticationConfirm:
    case PresenceKeyTypePresenceKeyResult:
    case PresenceKeyTypePresenceKeyNotify:
    case PresenceKeyTypePresenceKeyError:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPresenceKeyType(PresenceKeyType value) {
  switch (value) {
    case PresenceKeyTypePresenceKeyPriority:
      return @"PresenceKeyTypePresenceKeyPriority";
    case PresenceKeyTypePresenceKeyVerifyFriend:
      return @"PresenceKeyTypePresenceKeyVerifyFriend";
    case PresenceKeyTypePresenceKeyManualAuthenticationConfirm:
      return @"PresenceKeyTypePresenceKeyManualAuthenticationConfirm";
    case PresenceKeyTypePresenceKeyResult:
      return @"PresenceKeyTypePresenceKeyResult";
    case PresenceKeyTypePresenceKeyNotify:
      return @"PresenceKeyTypePresenceKeyNotify";
    case PresenceKeyTypePresenceKeyError:
      return @"PresenceKeyTypePresenceKeyError";
    default:
      return nil;
  }
}

@interface MessageKeyValue ()
@property (strong) NSString* key;
@property (strong) NSString* value;
@end

@implementation MessageKeyValue

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.key = @"";
    self.value = @"";
  }
  return self;
}
static MessageKeyValue* defaultMessageKeyValueInstance = nil;
+ (void) initialize {
  if (self == [MessageKeyValue class]) {
    defaultMessageKeyValueInstance = [[MessageKeyValue alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMessageKeyValueInstance;
}
- (instancetype) defaultInstance {
  return defaultMessageKeyValueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeString:1 value:self.key];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeStringSize(1, self.key);
  }
  if (self.hasValue) {
    size_ += computeStringSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MessageKeyValue*) parseFromData:(NSData*) data {
  return (MessageKeyValue*)[[[MessageKeyValue builder] mergeFromData:data] build];
}
+ (MessageKeyValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessageKeyValue*)[[[MessageKeyValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MessageKeyValue*) parseFromInputStream:(NSInputStream*) input {
  return (MessageKeyValue*)[[[MessageKeyValue builder] mergeFromInputStream:input] build];
}
+ (MessageKeyValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessageKeyValue*)[[[MessageKeyValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessageKeyValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MessageKeyValue*)[[[MessageKeyValue builder] mergeFromCodedInputStream:input] build];
}
+ (MessageKeyValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessageKeyValue*)[[[MessageKeyValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessageKeyValueBuilder*) builder {
  return [[MessageKeyValueBuilder alloc] init];
}
+ (MessageKeyValueBuilder*) builderWithPrototype:(MessageKeyValue*) prototype {
  return [[MessageKeyValue builder] mergeFrom:prototype];
}
- (MessageKeyValueBuilder*) builder {
  return [MessageKeyValue builder];
}
- (MessageKeyValueBuilder*) toBuilder {
  return [MessageKeyValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MessageKeyValue class]]) {
    return NO;
  }
  MessageKeyValue *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MessageKeyValueBuilder()
@property (strong) MessageKeyValue* resultMessageKeyValue;
@end

@implementation MessageKeyValueBuilder
@synthesize resultMessageKeyValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMessageKeyValue = [[MessageKeyValue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMessageKeyValue;
}
- (MessageKeyValueBuilder*) clear {
  self.resultMessageKeyValue = [[MessageKeyValue alloc] init];
  return self;
}
- (MessageKeyValueBuilder*) clone {
  return [MessageKeyValue builderWithPrototype:resultMessageKeyValue];
}
- (MessageKeyValue*) defaultInstance {
  return [MessageKeyValue defaultInstance];
}
- (MessageKeyValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MessageKeyValue*) buildPartial {
  MessageKeyValue* returnMe = resultMessageKeyValue;
  self.resultMessageKeyValue = nil;
  return returnMe;
}
- (MessageKeyValueBuilder*) mergeFrom:(MessageKeyValue*) other {
  if (other == [MessageKeyValue defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MessageKeyValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MessageKeyValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKey:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return resultMessageKeyValue.hasKey;
}
- (NSString*) key {
  return resultMessageKeyValue.key;
}
- (MessageKeyValueBuilder*) setKey:(NSString*) value {
  resultMessageKeyValue.hasKey = YES;
  resultMessageKeyValue.key = value;
  return self;
}
- (MessageKeyValueBuilder*) clearKey {
  resultMessageKeyValue.hasKey = NO;
  resultMessageKeyValue.key = @"";
  return self;
}
- (BOOL) hasValue {
  return resultMessageKeyValue.hasValue;
}
- (NSString*) value {
  return resultMessageKeyValue.value;
}
- (MessageKeyValueBuilder*) setValue:(NSString*) value {
  resultMessageKeyValue.hasValue = YES;
  resultMessageKeyValue.value = value;
  return self;
}
- (MessageKeyValueBuilder*) clearValue {
  resultMessageKeyValue.hasValue = NO;
  resultMessageKeyValue.value = @"";
  return self;
}
@end

@interface StringHeader ()
@property (strong) NSMutableArray<MessageKeyValue*> * paramsArray;
@property (strong) NSString* key;
@property (strong) NSString* value;
@property StringHeaderType definedKey;
@end

@implementation StringHeader

@synthesize paramsArray;
@dynamic params;
- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (BOOL) hasDefinedKey {
  return !!hasDefinedKey_;
}
- (void) setHasDefinedKey:(BOOL) _value_ {
  hasDefinedKey_ = !!_value_;
}
@synthesize definedKey;
- (instancetype) init {
  if ((self = [super init])) {
    self.key = @"";
    self.value = @"";
    self.definedKey = StringHeaderTypeStringHeaderTypeChatId;
  }
  return self;
}
static StringHeader* defaultStringHeaderInstance = nil;
+ (void) initialize {
  if (self == [StringHeader class]) {
    defaultStringHeaderInstance = [[StringHeader alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultStringHeaderInstance;
}
- (instancetype) defaultInstance {
  return defaultStringHeaderInstance;
}
- (NSArray<MessageKeyValue*> *)params {
  return paramsArray;
}
- (MessageKeyValue*)paramsAtIndex:(NSUInteger)index {
  return [paramsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.paramsArray enumerateObjectsUsingBlock:^(MessageKeyValue *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasKey) {
    [output writeString:2 value:self.key];
  }
  if (self.hasValue) {
    [output writeString:3 value:self.value];
  }
  if (self.hasDefinedKey) {
    [output writeEnum:4 value:self.definedKey];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.paramsArray enumerateObjectsUsingBlock:^(MessageKeyValue *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasKey) {
    size_ += computeStringSize(2, self.key);
  }
  if (self.hasValue) {
    size_ += computeStringSize(3, self.value);
  }
  if (self.hasDefinedKey) {
    size_ += computeEnumSize(4, self.definedKey);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (StringHeader*) parseFromData:(NSData*) data {
  return (StringHeader*)[[[StringHeader builder] mergeFromData:data] build];
}
+ (StringHeader*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StringHeader*)[[[StringHeader builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StringHeader*) parseFromInputStream:(NSInputStream*) input {
  return (StringHeader*)[[[StringHeader builder] mergeFromInputStream:input] build];
}
+ (StringHeader*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StringHeader*)[[[StringHeader builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StringHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StringHeader*)[[[StringHeader builder] mergeFromCodedInputStream:input] build];
}
+ (StringHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StringHeader*)[[[StringHeader builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StringHeaderBuilder*) builder {
  return [[StringHeaderBuilder alloc] init];
}
+ (StringHeaderBuilder*) builderWithPrototype:(StringHeader*) prototype {
  return [[StringHeader builder] mergeFrom:prototype];
}
- (StringHeaderBuilder*) builder {
  return [StringHeader builder];
}
- (StringHeaderBuilder*) toBuilder {
  return [StringHeader builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.paramsArray enumerateObjectsUsingBlock:^(MessageKeyValue *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"params"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  if (self.hasDefinedKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"definedKey", NSStringFromStringHeaderType(self.definedKey)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (MessageKeyValue* element in self.paramsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"params"];
  }
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  if (self.hasDefinedKey) {
    [dictionary setObject: @(self.definedKey) forKey: @"definedKey"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StringHeader class]]) {
    return NO;
  }
  StringHeader *otherMessage = other;
  return
      [self.paramsArray isEqualToArray:otherMessage.paramsArray] &&
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      self.hasDefinedKey == otherMessage.hasDefinedKey &&
      (!self.hasDefinedKey || self.definedKey == otherMessage.definedKey) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.paramsArray enumerateObjectsUsingBlock:^(MessageKeyValue *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  if (self.hasDefinedKey) {
    hashCode = hashCode * 31 + self.definedKey;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StringHeaderBuilder()
@property (strong) StringHeader* resultStringHeader;
@end

@implementation StringHeaderBuilder
@synthesize resultStringHeader;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStringHeader = [[StringHeader alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStringHeader;
}
- (StringHeaderBuilder*) clear {
  self.resultStringHeader = [[StringHeader alloc] init];
  return self;
}
- (StringHeaderBuilder*) clone {
  return [StringHeader builderWithPrototype:resultStringHeader];
}
- (StringHeader*) defaultInstance {
  return [StringHeader defaultInstance];
}
- (StringHeader*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StringHeader*) buildPartial {
  StringHeader* returnMe = resultStringHeader;
  self.resultStringHeader = nil;
  return returnMe;
}
- (StringHeaderBuilder*) mergeFrom:(StringHeader*) other {
  if (other == [StringHeader defaultInstance]) {
    return self;
  }
  if (other.paramsArray.count > 0) {
    if (resultStringHeader.paramsArray == nil) {
      resultStringHeader.paramsArray = [[NSMutableArray alloc] initWithArray:other.paramsArray];
    } else {
      [resultStringHeader.paramsArray addObjectsFromArray:other.paramsArray];
    }
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  if (other.hasDefinedKey) {
    [self setDefinedKey:other.definedKey];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StringHeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StringHeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MessageKeyValueBuilder* subBuilder = [MessageKeyValue builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addParams:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setKey:[input readString]];
        break;
      }
      case 26: {
        [self setValue:[input readString]];
        break;
      }
      case 32: {
        StringHeaderType value = (StringHeaderType)[input readEnum];
        if (StringHeaderTypeIsValidValue(value)) {
          [self setDefinedKey:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (NSMutableArray<MessageKeyValue*> *)params {
  return resultStringHeader.paramsArray;
}
- (MessageKeyValue*)paramsAtIndex:(NSUInteger)index {
  return [resultStringHeader paramsAtIndex:index];
}
- (StringHeaderBuilder *)addParams:(MessageKeyValue*)value {
  if (resultStringHeader.paramsArray == nil) {
    resultStringHeader.paramsArray = [[NSMutableArray alloc]init];
  }
  [resultStringHeader.paramsArray addObject:value];
  return self;
}
- (StringHeaderBuilder *)setParamsArray:(NSArray<MessageKeyValue*> *)array {
  resultStringHeader.paramsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (StringHeaderBuilder *)clearParams {
  resultStringHeader.paramsArray = nil;
  return self;
}
- (BOOL) hasKey {
  return resultStringHeader.hasKey;
}
- (NSString*) key {
  return resultStringHeader.key;
}
- (StringHeaderBuilder*) setKey:(NSString*) value {
    if ([self updateDefineKeyForKey:value] == NO) {
      resultStringHeader.hasKey = YES;
      resultStringHeader.key = value;
    }
  return self;
}
- (StringHeaderBuilder*) clearKey {
  resultStringHeader.hasKey = NO;
  resultStringHeader.key = @"";
  return self;
}
- (BOOL) hasValue {
  return resultStringHeader.hasValue;
}
- (NSString*) value {
  return resultStringHeader.value;
}
- (StringHeaderBuilder*) setValue:(NSString*) value {
  resultStringHeader.hasValue = YES;
  resultStringHeader.value = value;
  return self;
}
- (StringHeaderBuilder*) clearValue {
  resultStringHeader.hasValue = NO;
  resultStringHeader.value = @"";
  return self;
}
- (BOOL) hasDefinedKey {
  return resultStringHeader.hasDefinedKey;
}
- (StringHeaderType) definedKey {
  return resultStringHeader.definedKey;
}
- (StringHeaderBuilder*) setDefinedKey:(StringHeaderType) value {
  resultStringHeader.hasDefinedKey = YES;
  resultStringHeader.definedKey = value;
  return self;
}
- (StringHeaderBuilder*) clearDefinedKey {
  resultStringHeader.hasDefinedKey = NO;
  resultStringHeader.definedKey = StringHeaderTypeStringHeaderTypeChatId;
  return self;
}
@end

@interface PackageLength ()
@property SInt32 length;
@end

@implementation PackageLength

- (BOOL) hasLength {
  return !!hasLength_;
}
- (void) setHasLength:(BOOL) _value_ {
  hasLength_ = !!_value_;
}
@synthesize length;
- (instancetype) init {
  if ((self = [super init])) {
    self.length = 0;
  }
  return self;
}
static PackageLength* defaultPackageLengthInstance = nil;
+ (void) initialize {
  if (self == [PackageLength class]) {
    defaultPackageLengthInstance = [[PackageLength alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPackageLengthInstance;
}
- (instancetype) defaultInstance {
  return defaultPackageLengthInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLength) {
    [output writeInt32:1 value:self.length];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLength) {
    size_ += computeInt32Size(1, self.length);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PackageLength*) parseFromData:(NSData*) data {
  return (PackageLength*)[[[PackageLength builder] mergeFromData:data] build];
}
+ (PackageLength*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PackageLength*)[[[PackageLength builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PackageLength*) parseFromInputStream:(NSInputStream*) input {
  return (PackageLength*)[[[PackageLength builder] mergeFromInputStream:input] build];
}
+ (PackageLength*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PackageLength*)[[[PackageLength builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PackageLength*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PackageLength*)[[[PackageLength builder] mergeFromCodedInputStream:input] build];
}
+ (PackageLength*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PackageLength*)[[[PackageLength builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PackageLengthBuilder*) builder {
  return [[PackageLengthBuilder alloc] init];
}
+ (PackageLengthBuilder*) builderWithPrototype:(PackageLength*) prototype {
  return [[PackageLength builder] mergeFrom:prototype];
}
- (PackageLengthBuilder*) builder {
  return [PackageLength builder];
}
- (PackageLengthBuilder*) toBuilder {
  return [PackageLength builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"length", [NSNumber numberWithInteger:self.length]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLength) {
    [dictionary setObject: [NSNumber numberWithInteger:self.length] forKey: @"length"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PackageLength class]]) {
    return NO;
  }
  PackageLength *otherMessage = other;
  return
      self.hasLength == otherMessage.hasLength &&
      (!self.hasLength || self.length == otherMessage.length) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.length] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PackageLengthBuilder()
@property (strong) PackageLength* resultPackageLength;
@end

@implementation PackageLengthBuilder
@synthesize resultPackageLength;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPackageLength = [[PackageLength alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPackageLength;
}
- (PackageLengthBuilder*) clear {
  self.resultPackageLength = [[PackageLength alloc] init];
  return self;
}
- (PackageLengthBuilder*) clone {
  return [PackageLength builderWithPrototype:resultPackageLength];
}
- (PackageLength*) defaultInstance {
  return [PackageLength defaultInstance];
}
- (PackageLength*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PackageLength*) buildPartial {
  PackageLength* returnMe = resultPackageLength;
  self.resultPackageLength = nil;
  return returnMe;
}
- (PackageLengthBuilder*) mergeFrom:(PackageLength*) other {
  if (other == [PackageLength defaultInstance]) {
    return self;
  }
  if (other.hasLength) {
    [self setLength:other.length];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PackageLengthBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PackageLengthBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLength:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLength {
  return resultPackageLength.hasLength;
}
- (SInt32) length {
  return resultPackageLength.length;
}
- (PackageLengthBuilder*) setLength:(SInt32) value {
  resultPackageLength.hasLength = YES;
  resultPackageLength.length = value;
  return self;
}
- (PackageLengthBuilder*) clearLength {
  resultPackageLength.hasLength = NO;
  resultPackageLength.length = 0;
  return self;
}
@end

@interface ProtoHeader ()
@property SInt32 version;
@property SInt32 options;
@property (strong) PBAppendableArray * optionlistArray;
@property SInt32 length;
@property (strong) NSString* content;
@property (strong) NSData* message;
@end

@implementation ProtoHeader

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasOptions {
  return !!hasOptions_;
}
- (void) setHasOptions:(BOOL) _value_ {
  hasOptions_ = !!_value_;
}
@synthesize options;
@synthesize optionlistArray;
@dynamic optionlist;
- (BOOL) hasLength {
  return !!hasLength_;
}
- (void) setHasLength:(BOOL) _value_ {
  hasLength_ = !!_value_;
}
@synthesize length;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (instancetype) init {
  if ((self = [super init])) {
    self.version = 0;
    self.options = 0;
    self.length = 0;
    self.content = @"";
    self.message = [NSData data];
  }
  return self;
}
static ProtoHeader* defaultProtoHeaderInstance = nil;
+ (void) initialize {
  if (self == [ProtoHeader class]) {
    defaultProtoHeaderInstance = [[ProtoHeader alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProtoHeaderInstance;
}
- (instancetype) defaultInstance {
  return defaultProtoHeaderInstance;
}
- (PBArray *)optionlist {
  return optionlistArray;
}
- (SInt32)optionlistAtIndex:(NSUInteger)index {
  return [optionlistArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeInt32:1 value:self.version];
  }
  if (self.hasOptions) {
    [output writeInt32:2 value:self.options];
  }
  const NSUInteger optionlistArrayCount = self.optionlistArray.count;
  if (optionlistArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.optionlistArray.data;
    for (NSUInteger i = 0; i < optionlistArrayCount; ++i) {
      [output writeInt32:3 value:values[i]];
    }
  }
  if (self.hasLength) {
    [output writeInt32:4 value:self.length];
  }
  if (self.hasContent) {
    [output writeString:5 value:self.content];
  }
  if (self.hasMessage) {
    [output writeData:6 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasVersion) {
    size_ += computeInt32Size(1, self.version);
  }
  if (self.hasOptions) {
    size_ += computeInt32Size(2, self.options);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.optionlistArray.count;
    const SInt32 *values = (const SInt32 *)self.optionlistArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasLength) {
    size_ += computeInt32Size(4, self.length);
  }
  if (self.hasContent) {
    size_ += computeStringSize(5, self.content);
  }
  if (self.hasMessage) {
    size_ += computeDataSize(6, self.message);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProtoHeader*) parseFromData:(NSData*) data {
  return (ProtoHeader*)[[[ProtoHeader builder] mergeFromData:data] build];
}
+ (ProtoHeader*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoHeader*)[[[ProtoHeader builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProtoHeader*) parseFromInputStream:(NSInputStream*) input {
  return (ProtoHeader*)[[[ProtoHeader builder] mergeFromInputStream:input] build];
}
+ (ProtoHeader*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoHeader*)[[[ProtoHeader builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProtoHeader*)[[[ProtoHeader builder] mergeFromCodedInputStream:input] build];
}
+ (ProtoHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoHeader*)[[[ProtoHeader builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoHeaderBuilder*) builder {
  return [[ProtoHeaderBuilder alloc] init];
}
+ (ProtoHeaderBuilder*) builderWithPrototype:(ProtoHeader*) prototype {
  return [[ProtoHeader builder] mergeFrom:prototype];
}
- (ProtoHeaderBuilder*) builder {
  return [ProtoHeader builder];
}
- (ProtoHeaderBuilder*) toBuilder {
  return [ProtoHeader builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  if (self.hasOptions) {
    [output appendFormat:@"%@%@: %@\n", indent, @"options", [NSNumber numberWithInteger:self.options]];
  }
  [self.optionlistArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionlist", obj];
  }];
  if (self.hasLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"length", [NSNumber numberWithInteger:self.length]];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.version] forKey: @"version"];
  }
  if (self.hasOptions) {
    [dictionary setObject: [NSNumber numberWithInteger:self.options] forKey: @"options"];
  }
  NSMutableArray * optionlistArrayArray = [NSMutableArray new];
  NSUInteger optionlistArrayCount=self.optionlistArray.count;
  for(int i=0;i<optionlistArrayCount;i++){
    [optionlistArrayArray addObject: @([self.optionlistArray int32AtIndex:i])];
  }
  [dictionary setObject: optionlistArrayArray forKey: @"optionlist"];
  if (self.hasLength) {
    [dictionary setObject: [NSNumber numberWithInteger:self.length] forKey: @"length"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ProtoHeader class]]) {
    return NO;
  }
  ProtoHeader *otherMessage = other;
  return
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      self.hasOptions == otherMessage.hasOptions &&
      (!self.hasOptions || self.options == otherMessage.options) &&
      [self.optionlistArray isEqualToArray:otherMessage.optionlistArray] &&
      self.hasLength == otherMessage.hasLength &&
      (!self.hasLength || self.length == otherMessage.length) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  if (self.hasOptions) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.options] hash];
  }
  [self.optionlistArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.length] hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProtoHeaderBuilder()
@property (strong) ProtoHeader* resultProtoHeader;
@end

@implementation ProtoHeaderBuilder
@synthesize resultProtoHeader;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProtoHeader = [[ProtoHeader alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProtoHeader;
}
- (ProtoHeaderBuilder*) clear {
  self.resultProtoHeader = [[ProtoHeader alloc] init];
  return self;
}
- (ProtoHeaderBuilder*) clone {
  return [ProtoHeader builderWithPrototype:resultProtoHeader];
}
- (ProtoHeader*) defaultInstance {
  return [ProtoHeader defaultInstance];
}
- (ProtoHeader*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProtoHeader*) buildPartial {
  ProtoHeader* returnMe = resultProtoHeader;
  self.resultProtoHeader = nil;
  return returnMe;
}
- (ProtoHeaderBuilder*) mergeFrom:(ProtoHeader*) other {
  if (other == [ProtoHeader defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasOptions) {
    [self setOptions:other.options];
  }
  if (other.optionlistArray.count > 0) {
    if (resultProtoHeader.optionlistArray == nil) {
      resultProtoHeader.optionlistArray = [other.optionlistArray copy];
    } else {
      [resultProtoHeader.optionlistArray appendArray:other.optionlistArray];
    }
  }
  if (other.hasLength) {
    [self setLength:other.length];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProtoHeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProtoHeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 16: {
        [self setOptions:[input readInt32]];
        break;
      }
      case 24: {
        [self addOptionlist:[input readInt32]];
        break;
      }
      case 32: {
        [self setLength:[input readInt32]];
        break;
      }
      case 42: {
        [self setContent:[input readString]];
        break;
      }
      case 50: {
        [self setMessage:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return resultProtoHeader.hasVersion;
}
- (SInt32) version {
  return resultProtoHeader.version;
}
- (ProtoHeaderBuilder*) setVersion:(SInt32) value {
  resultProtoHeader.hasVersion = YES;
  resultProtoHeader.version = value;
  return self;
}
- (ProtoHeaderBuilder*) clearVersion {
  resultProtoHeader.hasVersion = NO;
  resultProtoHeader.version = 0;
  return self;
}
- (BOOL) hasOptions {
  return resultProtoHeader.hasOptions;
}
- (SInt32) options {
  return resultProtoHeader.options;
}
- (ProtoHeaderBuilder*) setOptions:(SInt32) value {
  resultProtoHeader.hasOptions = YES;
  resultProtoHeader.options = value;
  return self;
}
- (ProtoHeaderBuilder*) clearOptions {
  resultProtoHeader.hasOptions = NO;
  resultProtoHeader.options = 0;
  return self;
}
- (PBAppendableArray *)optionlist {
  return resultProtoHeader.optionlistArray;
}
- (SInt32)optionlistAtIndex:(NSUInteger)index {
  return [resultProtoHeader optionlistAtIndex:index];
}
- (ProtoHeaderBuilder *)addOptionlist:(SInt32)value {
  if (resultProtoHeader.optionlistArray == nil) {
    resultProtoHeader.optionlistArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultProtoHeader.optionlistArray addInt32:value];
  return self;
}
- (ProtoHeaderBuilder *)setOptionlistArray:(NSArray *)array {
  resultProtoHeader.optionlistArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (ProtoHeaderBuilder *)setOptionlistValues:(const SInt32 *)values count:(NSUInteger)count {
  resultProtoHeader.optionlistArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (ProtoHeaderBuilder *)clearOptionlist {
  resultProtoHeader.optionlistArray = nil;
  return self;
}
- (BOOL) hasLength {
  return resultProtoHeader.hasLength;
}
- (SInt32) length {
  return resultProtoHeader.length;
}
- (ProtoHeaderBuilder*) setLength:(SInt32) value {
  resultProtoHeader.hasLength = YES;
  resultProtoHeader.length = value;
  return self;
}
- (ProtoHeaderBuilder*) clearLength {
  resultProtoHeader.hasLength = NO;
  resultProtoHeader.length = 0;
  return self;
}
- (BOOL) hasContent {
  return resultProtoHeader.hasContent;
}
- (NSString*) content {
  return resultProtoHeader.content;
}
- (ProtoHeaderBuilder*) setContent:(NSString*) value {
  resultProtoHeader.hasContent = YES;
  resultProtoHeader.content = value;
  return self;
}
- (ProtoHeaderBuilder*) clearContent {
  resultProtoHeader.hasContent = NO;
  resultProtoHeader.content = @"";
  return self;
}
- (BOOL) hasMessage {
  return resultProtoHeader.hasMessage;
}
- (NSData*) message {
  return resultProtoHeader.message;
}
- (ProtoHeaderBuilder*) setMessage:(NSData*) value {
  resultProtoHeader.hasMessage = YES;
  resultProtoHeader.message = value;
  return self;
}
- (ProtoHeaderBuilder*) clearMessage {
  resultProtoHeader.hasMessage = NO;
  resultProtoHeader.message = [NSData data];
  return self;
}
@end

@interface AuthMessage ()
@property (strong) NSString* mechanism;
@property (strong) NSString* method;
@property (strong) NSString* msgId;
@property (strong) NSString* authKey;
@property (strong) MessageBody* otherBody;
@end

@implementation AuthMessage

- (BOOL) hasMechanism {
  return !!hasMechanism_;
}
- (void) setHasMechanism:(BOOL) _value_ {
  hasMechanism_ = !!_value_;
}
@synthesize mechanism;
- (BOOL) hasMethod {
  return !!hasMethod_;
}
- (void) setHasMethod:(BOOL) _value_ {
  hasMethod_ = !!_value_;
}
@synthesize method;
- (BOOL) hasMsgId {
  return !!hasMsgId_;
}
- (void) setHasMsgId:(BOOL) _value_ {
  hasMsgId_ = !!_value_;
}
@synthesize msgId;
- (BOOL) hasAuthKey {
  return !!hasAuthKey_;
}
- (void) setHasAuthKey:(BOOL) _value_ {
  hasAuthKey_ = !!_value_;
}
@synthesize authKey;
- (BOOL) hasOtherBody {
  return !!hasOtherBody_;
}
- (void) setHasOtherBody:(BOOL) _value_ {
  hasOtherBody_ = !!_value_;
}
@synthesize otherBody;
- (instancetype) init {
  if ((self = [super init])) {
    self.mechanism = @"";
    self.method = @"";
    self.msgId = @"";
    self.authKey = @"";
    self.otherBody = [MessageBody defaultInstance];
  }
  return self;
}
static AuthMessage* defaultAuthMessageInstance = nil;
+ (void) initialize {
  if (self == [AuthMessage class]) {
    defaultAuthMessageInstance = [[AuthMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAuthMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultAuthMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMechanism) {
    [output writeString:1 value:self.mechanism];
  }
  if (self.hasMethod) {
    [output writeString:2 value:self.method];
  }
  if (self.hasMsgId) {
    [output writeString:3 value:self.msgId];
  }
  if (self.hasAuthKey) {
    [output writeString:4 value:self.authKey];
  }
  if (self.hasOtherBody) {
    [output writeMessage:5 value:self.otherBody];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMechanism) {
    size_ += computeStringSize(1, self.mechanism);
  }
  if (self.hasMethod) {
    size_ += computeStringSize(2, self.method);
  }
  if (self.hasMsgId) {
    size_ += computeStringSize(3, self.msgId);
  }
  if (self.hasAuthKey) {
    size_ += computeStringSize(4, self.authKey);
  }
  if (self.hasOtherBody) {
    size_ += computeMessageSize(5, self.otherBody);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AuthMessage*) parseFromData:(NSData*) data {
  return (AuthMessage*)[[[AuthMessage builder] mergeFromData:data] build];
}
+ (AuthMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthMessage*)[[[AuthMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AuthMessage*) parseFromInputStream:(NSInputStream*) input {
  return (AuthMessage*)[[[AuthMessage builder] mergeFromInputStream:input] build];
}
+ (AuthMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthMessage*)[[[AuthMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AuthMessage*)[[[AuthMessage builder] mergeFromCodedInputStream:input] build];
}
+ (AuthMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthMessage*)[[[AuthMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthMessageBuilder*) builder {
  return [[AuthMessageBuilder alloc] init];
}
+ (AuthMessageBuilder*) builderWithPrototype:(AuthMessage*) prototype {
  return [[AuthMessage builder] mergeFrom:prototype];
}
- (AuthMessageBuilder*) builder {
  return [AuthMessage builder];
}
- (AuthMessageBuilder*) toBuilder {
  return [AuthMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMechanism) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mechanism", self.mechanism];
  }
  if (self.hasMethod) {
    [output appendFormat:@"%@%@: %@\n", indent, @"method", self.method];
  }
  if (self.hasMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgId", self.msgId];
  }
  if (self.hasAuthKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"authKey", self.authKey];
  }
  if (self.hasOtherBody) {
    [output appendFormat:@"%@%@ {\n", indent, @"otherBody"];
    [self.otherBody writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMechanism) {
    [dictionary setObject: self.mechanism forKey: @"mechanism"];
  }
  if (self.hasMethod) {
    [dictionary setObject: self.method forKey: @"method"];
  }
  if (self.hasMsgId) {
    [dictionary setObject: self.msgId forKey: @"msgId"];
  }
  if (self.hasAuthKey) {
    [dictionary setObject: self.authKey forKey: @"authKey"];
  }
  if (self.hasOtherBody) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.otherBody storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"otherBody"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AuthMessage class]]) {
    return NO;
  }
  AuthMessage *otherMessage = other;
  return
      self.hasMechanism == otherMessage.hasMechanism &&
      (!self.hasMechanism || [self.mechanism isEqual:otherMessage.mechanism]) &&
      self.hasMethod == otherMessage.hasMethod &&
      (!self.hasMethod || [self.method isEqual:otherMessage.method]) &&
      self.hasMsgId == otherMessage.hasMsgId &&
      (!self.hasMsgId || [self.msgId isEqual:otherMessage.msgId]) &&
      self.hasAuthKey == otherMessage.hasAuthKey &&
      (!self.hasAuthKey || [self.authKey isEqual:otherMessage.authKey]) &&
      self.hasOtherBody == otherMessage.hasOtherBody &&
      (!self.hasOtherBody || [self.otherBody isEqual:otherMessage.otherBody]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMechanism) {
    hashCode = hashCode * 31 + [self.mechanism hash];
  }
  if (self.hasMethod) {
    hashCode = hashCode * 31 + [self.method hash];
  }
  if (self.hasMsgId) {
    hashCode = hashCode * 31 + [self.msgId hash];
  }
  if (self.hasAuthKey) {
    hashCode = hashCode * 31 + [self.authKey hash];
  }
  if (self.hasOtherBody) {
    hashCode = hashCode * 31 + [self.otherBody hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AuthMessageBuilder()
@property (strong) AuthMessage* resultAuthMessage;
@end

@implementation AuthMessageBuilder
@synthesize resultAuthMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAuthMessage = [[AuthMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAuthMessage;
}
- (AuthMessageBuilder*) clear {
  self.resultAuthMessage = [[AuthMessage alloc] init];
  return self;
}
- (AuthMessageBuilder*) clone {
  return [AuthMessage builderWithPrototype:resultAuthMessage];
}
- (AuthMessage*) defaultInstance {
  return [AuthMessage defaultInstance];
}
- (AuthMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AuthMessage*) buildPartial {
  AuthMessage* returnMe = resultAuthMessage;
  self.resultAuthMessage = nil;
  return returnMe;
}
- (AuthMessageBuilder*) mergeFrom:(AuthMessage*) other {
  if (other == [AuthMessage defaultInstance]) {
    return self;
  }
  if (other.hasMechanism) {
    [self setMechanism:other.mechanism];
  }
  if (other.hasMethod) {
    [self setMethod:other.method];
  }
  if (other.hasMsgId) {
    [self setMsgId:other.msgId];
  }
  if (other.hasAuthKey) {
    [self setAuthKey:other.authKey];
  }
  if (other.hasOtherBody) {
    [self mergeOtherBody:other.otherBody];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AuthMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AuthMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMechanism:[input readString]];
        break;
      }
      case 18: {
        [self setMethod:[input readString]];
        break;
      }
      case 26: {
        [self setMsgId:[input readString]];
        break;
      }
      case 34: {
        [self setAuthKey:[input readString]];
        break;
      }
      case 42: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        if (self.hasOtherBody) {
          [subBuilder mergeFrom:self.otherBody];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOtherBody:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMechanism {
  return resultAuthMessage.hasMechanism;
}
- (NSString*) mechanism {
  return resultAuthMessage.mechanism;
}
- (AuthMessageBuilder*) setMechanism:(NSString*) value {
  resultAuthMessage.hasMechanism = YES;
  resultAuthMessage.mechanism = value;
  return self;
}
- (AuthMessageBuilder*) clearMechanism {
  resultAuthMessage.hasMechanism = NO;
  resultAuthMessage.mechanism = @"";
  return self;
}
- (BOOL) hasMethod {
  return resultAuthMessage.hasMethod;
}
- (NSString*) method {
  return resultAuthMessage.method;
}
- (AuthMessageBuilder*) setMethod:(NSString*) value {
  resultAuthMessage.hasMethod = YES;
  resultAuthMessage.method = value;
  return self;
}
- (AuthMessageBuilder*) clearMethod {
  resultAuthMessage.hasMethod = NO;
  resultAuthMessage.method = @"";
  return self;
}
- (BOOL) hasMsgId {
  return resultAuthMessage.hasMsgId;
}
- (NSString*) msgId {
  return resultAuthMessage.msgId;
}
- (AuthMessageBuilder*) setMsgId:(NSString*) value {
  resultAuthMessage.hasMsgId = YES;
  resultAuthMessage.msgId = value;
  return self;
}
- (AuthMessageBuilder*) clearMsgId {
  resultAuthMessage.hasMsgId = NO;
  resultAuthMessage.msgId = @"";
  return self;
}
- (BOOL) hasAuthKey {
  return resultAuthMessage.hasAuthKey;
}
- (NSString*) authKey {
  return resultAuthMessage.authKey;
}
- (AuthMessageBuilder*) setAuthKey:(NSString*) value {
  resultAuthMessage.hasAuthKey = YES;
  resultAuthMessage.authKey = value;
  return self;
}
- (AuthMessageBuilder*) clearAuthKey {
  resultAuthMessage.hasAuthKey = NO;
  resultAuthMessage.authKey = @"";
  return self;
}
- (BOOL) hasOtherBody {
  return resultAuthMessage.hasOtherBody;
}
- (MessageBody*) otherBody {
  return resultAuthMessage.otherBody;
}
- (AuthMessageBuilder*) setOtherBody:(MessageBody*) value {
  resultAuthMessage.hasOtherBody = YES;
  resultAuthMessage.otherBody = value;
  return self;
}
- (AuthMessageBuilder*) setOtherBodyBuilder:(MessageBodyBuilder*) builderForValue {
  return [self setOtherBody:[builderForValue build]];
}
- (AuthMessageBuilder*) mergeOtherBody:(MessageBody*) value {
  if (resultAuthMessage.hasOtherBody &&
      resultAuthMessage.otherBody != [MessageBody defaultInstance]) {
    resultAuthMessage.otherBody =
      [[[MessageBody builderWithPrototype:resultAuthMessage.otherBody] mergeFrom:value] buildPartial];
  } else {
    resultAuthMessage.otherBody = value;
  }
  resultAuthMessage.hasOtherBody = YES;
  return self;
}
- (AuthMessageBuilder*) clearOtherBody {
  resultAuthMessage.hasOtherBody = NO;
  resultAuthMessage.otherBody = [MessageBody defaultInstance];
  return self;
}
@end

@interface WelcomeMessage ()
@property (strong) NSString* domain;
@property (strong) NSString* version;
@property (strong) NSString* user;
@property (strong) NSString* sockmod;
@end

@implementation WelcomeMessage

- (BOOL) hasDomain {
  return !!hasDomain_;
}
- (void) setHasDomain:(BOOL) _value_ {
  hasDomain_ = !!_value_;
}
@synthesize domain;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasSockmod {
  return !!hasSockmod_;
}
- (void) setHasSockmod:(BOOL) _value_ {
  hasSockmod_ = !!_value_;
}
@synthesize sockmod;
- (instancetype) init {
  if ((self = [super init])) {
    self.domain = @"";
    self.version = @"";
    self.user = @"";
    self.sockmod = @"";
  }
  return self;
}
static WelcomeMessage* defaultWelcomeMessageInstance = nil;
+ (void) initialize {
  if (self == [WelcomeMessage class]) {
    defaultWelcomeMessageInstance = [[WelcomeMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWelcomeMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultWelcomeMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDomain) {
    [output writeString:1 value:self.domain];
  }
  if (self.hasVersion) {
    [output writeString:2 value:self.version];
  }
  if (self.hasUser) {
    [output writeString:3 value:self.user];
  }
  if (self.hasSockmod) {
    [output writeString:4 value:self.sockmod];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDomain) {
    size_ += computeStringSize(1, self.domain);
  }
  if (self.hasVersion) {
    size_ += computeStringSize(2, self.version);
  }
  if (self.hasUser) {
    size_ += computeStringSize(3, self.user);
  }
  if (self.hasSockmod) {
    size_ += computeStringSize(4, self.sockmod);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WelcomeMessage*) parseFromData:(NSData*) data {
  return (WelcomeMessage*)[[[WelcomeMessage builder] mergeFromData:data] build];
}
+ (WelcomeMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WelcomeMessage*)[[[WelcomeMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WelcomeMessage*) parseFromInputStream:(NSInputStream*) input {
  return (WelcomeMessage*)[[[WelcomeMessage builder] mergeFromInputStream:input] build];
}
+ (WelcomeMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WelcomeMessage*)[[[WelcomeMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WelcomeMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WelcomeMessage*)[[[WelcomeMessage builder] mergeFromCodedInputStream:input] build];
}
+ (WelcomeMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WelcomeMessage*)[[[WelcomeMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WelcomeMessageBuilder*) builder {
  return [[WelcomeMessageBuilder alloc] init];
}
+ (WelcomeMessageBuilder*) builderWithPrototype:(WelcomeMessage*) prototype {
  return [[WelcomeMessage builder] mergeFrom:prototype];
}
- (WelcomeMessageBuilder*) builder {
  return [WelcomeMessage builder];
}
- (WelcomeMessageBuilder*) toBuilder {
  return [WelcomeMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDomain) {
    [output appendFormat:@"%@%@: %@\n", indent, @"domain", self.domain];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", self.version];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@: %@\n", indent, @"user", self.user];
  }
  if (self.hasSockmod) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sockmod", self.sockmod];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDomain) {
    [dictionary setObject: self.domain forKey: @"domain"];
  }
  if (self.hasVersion) {
    [dictionary setObject: self.version forKey: @"version"];
  }
  if (self.hasUser) {
    [dictionary setObject: self.user forKey: @"user"];
  }
  if (self.hasSockmod) {
    [dictionary setObject: self.sockmod forKey: @"sockmod"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WelcomeMessage class]]) {
    return NO;
  }
  WelcomeMessage *otherMessage = other;
  return
      self.hasDomain == otherMessage.hasDomain &&
      (!self.hasDomain || [self.domain isEqual:otherMessage.domain]) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasSockmod == otherMessage.hasSockmod &&
      (!self.hasSockmod || [self.sockmod isEqual:otherMessage.sockmod]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDomain) {
    hashCode = hashCode * 31 + [self.domain hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasSockmod) {
    hashCode = hashCode * 31 + [self.sockmod hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WelcomeMessageBuilder()
@property (strong) WelcomeMessage* resultWelcomeMessage;
@end

@implementation WelcomeMessageBuilder
@synthesize resultWelcomeMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWelcomeMessage = [[WelcomeMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWelcomeMessage;
}
- (WelcomeMessageBuilder*) clear {
  self.resultWelcomeMessage = [[WelcomeMessage alloc] init];
  return self;
}
- (WelcomeMessageBuilder*) clone {
  return [WelcomeMessage builderWithPrototype:resultWelcomeMessage];
}
- (WelcomeMessage*) defaultInstance {
  return [WelcomeMessage defaultInstance];
}
- (WelcomeMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WelcomeMessage*) buildPartial {
  WelcomeMessage* returnMe = resultWelcomeMessage;
  self.resultWelcomeMessage = nil;
  return returnMe;
}
- (WelcomeMessageBuilder*) mergeFrom:(WelcomeMessage*) other {
  if (other == [WelcomeMessage defaultInstance]) {
    return self;
  }
  if (other.hasDomain) {
    [self setDomain:other.domain];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasUser) {
    [self setUser:other.user];
  }
  if (other.hasSockmod) {
    [self setSockmod:other.sockmod];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WelcomeMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WelcomeMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDomain:[input readString]];
        break;
      }
      case 18: {
        [self setVersion:[input readString]];
        break;
      }
      case 26: {
        [self setUser:[input readString]];
        break;
      }
      case 34: {
        [self setSockmod:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDomain {
  return resultWelcomeMessage.hasDomain;
}
- (NSString*) domain {
  return resultWelcomeMessage.domain;
}
- (WelcomeMessageBuilder*) setDomain:(NSString*) value {
  resultWelcomeMessage.hasDomain = YES;
  resultWelcomeMessage.domain = value;
  return self;
}
- (WelcomeMessageBuilder*) clearDomain {
  resultWelcomeMessage.hasDomain = NO;
  resultWelcomeMessage.domain = @"";
  return self;
}
- (BOOL) hasVersion {
  return resultWelcomeMessage.hasVersion;
}
- (NSString*) version {
  return resultWelcomeMessage.version;
}
- (WelcomeMessageBuilder*) setVersion:(NSString*) value {
  resultWelcomeMessage.hasVersion = YES;
  resultWelcomeMessage.version = value;
  return self;
}
- (WelcomeMessageBuilder*) clearVersion {
  resultWelcomeMessage.hasVersion = NO;
  resultWelcomeMessage.version = @"";
  return self;
}
- (BOOL) hasUser {
  return resultWelcomeMessage.hasUser;
}
- (NSString*) user {
  return resultWelcomeMessage.user;
}
- (WelcomeMessageBuilder*) setUser:(NSString*) value {
  resultWelcomeMessage.hasUser = YES;
  resultWelcomeMessage.user = value;
  return self;
}
- (WelcomeMessageBuilder*) clearUser {
  resultWelcomeMessage.hasUser = NO;
  resultWelcomeMessage.user = @"";
  return self;
}
- (BOOL) hasSockmod {
  return resultWelcomeMessage.hasSockmod;
}
- (NSString*) sockmod {
  return resultWelcomeMessage.sockmod;
}
- (WelcomeMessageBuilder*) setSockmod:(NSString*) value {
  resultWelcomeMessage.hasSockmod = YES;
  resultWelcomeMessage.sockmod = value;
  return self;
}
- (WelcomeMessageBuilder*) clearSockmod {
  resultWelcomeMessage.hasSockmod = NO;
  resultWelcomeMessage.sockmod = @"";
  return self;
}
@end

@interface StreamBegin ()
@property (strong) NSString* domain;
@property (strong) NSString* version;
@property (strong) NSMutableArray<MessageBody*> * bodysArray;
@end

@implementation StreamBegin

- (BOOL) hasDomain {
  return !!hasDomain_;
}
- (void) setHasDomain:(BOOL) _value_ {
  hasDomain_ = !!_value_;
}
@synthesize domain;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
@synthesize bodysArray;
@dynamic bodys;
- (instancetype) init {
  if ((self = [super init])) {
    self.domain = @"";
    self.version = @"";
  }
  return self;
}
static StreamBegin* defaultStreamBeginInstance = nil;
+ (void) initialize {
  if (self == [StreamBegin class]) {
    defaultStreamBeginInstance = [[StreamBegin alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultStreamBeginInstance;
}
- (instancetype) defaultInstance {
  return defaultStreamBeginInstance;
}
- (NSArray<MessageBody*> *)bodys {
  return bodysArray;
}
- (MessageBody*)bodysAtIndex:(NSUInteger)index {
  return [bodysArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDomain) {
    [output writeString:1 value:self.domain];
  }
  if (self.hasVersion) {
    [output writeString:2 value:self.version];
  }
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDomain) {
    size_ += computeStringSize(1, self.domain);
  }
  if (self.hasVersion) {
    size_ += computeStringSize(2, self.version);
  }
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (StreamBegin*) parseFromData:(NSData*) data {
  return (StreamBegin*)[[[StreamBegin builder] mergeFromData:data] build];
}
+ (StreamBegin*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StreamBegin*)[[[StreamBegin builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StreamBegin*) parseFromInputStream:(NSInputStream*) input {
  return (StreamBegin*)[[[StreamBegin builder] mergeFromInputStream:input] build];
}
+ (StreamBegin*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StreamBegin*)[[[StreamBegin builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StreamBegin*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StreamBegin*)[[[StreamBegin builder] mergeFromCodedInputStream:input] build];
}
+ (StreamBegin*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StreamBegin*)[[[StreamBegin builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StreamBeginBuilder*) builder {
  return [[StreamBeginBuilder alloc] init];
}
+ (StreamBeginBuilder*) builderWithPrototype:(StreamBegin*) prototype {
  return [[StreamBegin builder] mergeFrom:prototype];
}
- (StreamBeginBuilder*) builder {
  return [StreamBegin builder];
}
- (StreamBeginBuilder*) toBuilder {
  return [StreamBegin builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDomain) {
    [output appendFormat:@"%@%@: %@\n", indent, @"domain", self.domain];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", self.version];
  }
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bodys"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDomain) {
    [dictionary setObject: self.domain forKey: @"domain"];
  }
  if (self.hasVersion) {
    [dictionary setObject: self.version forKey: @"version"];
  }
  for (MessageBody* element in self.bodysArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"bodys"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StreamBegin class]]) {
    return NO;
  }
  StreamBegin *otherMessage = other;
  return
      self.hasDomain == otherMessage.hasDomain &&
      (!self.hasDomain || [self.domain isEqual:otherMessage.domain]) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      [self.bodysArray isEqualToArray:otherMessage.bodysArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDomain) {
    hashCode = hashCode * 31 + [self.domain hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StreamBeginBuilder()
@property (strong) StreamBegin* resultStreamBegin;
@end

@implementation StreamBeginBuilder
@synthesize resultStreamBegin;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStreamBegin = [[StreamBegin alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStreamBegin;
}
- (StreamBeginBuilder*) clear {
  self.resultStreamBegin = [[StreamBegin alloc] init];
  return self;
}
- (StreamBeginBuilder*) clone {
  return [StreamBegin builderWithPrototype:resultStreamBegin];
}
- (StreamBegin*) defaultInstance {
  return [StreamBegin defaultInstance];
}
- (StreamBegin*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StreamBegin*) buildPartial {
  StreamBegin* returnMe = resultStreamBegin;
  self.resultStreamBegin = nil;
  return returnMe;
}
- (StreamBeginBuilder*) mergeFrom:(StreamBegin*) other {
  if (other == [StreamBegin defaultInstance]) {
    return self;
  }
  if (other.hasDomain) {
    [self setDomain:other.domain];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.bodysArray.count > 0) {
    if (resultStreamBegin.bodysArray == nil) {
      resultStreamBegin.bodysArray = [[NSMutableArray alloc] initWithArray:other.bodysArray];
    } else {
      [resultStreamBegin.bodysArray addObjectsFromArray:other.bodysArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StreamBeginBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StreamBeginBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDomain:[input readString]];
        break;
      }
      case 18: {
        [self setVersion:[input readString]];
        break;
      }
      case 26: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBodys:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasDomain {
  return resultStreamBegin.hasDomain;
}
- (NSString*) domain {
  return resultStreamBegin.domain;
}
- (StreamBeginBuilder*) setDomain:(NSString*) value {
  resultStreamBegin.hasDomain = YES;
  resultStreamBegin.domain = value;
  return self;
}
- (StreamBeginBuilder*) clearDomain {
  resultStreamBegin.hasDomain = NO;
  resultStreamBegin.domain = @"";
  return self;
}
- (BOOL) hasVersion {
  return resultStreamBegin.hasVersion;
}
- (NSString*) version {
  return resultStreamBegin.version;
}
- (StreamBeginBuilder*) setVersion:(NSString*) value {
  resultStreamBegin.hasVersion = YES;
  resultStreamBegin.version = value;
  return self;
}
- (StreamBeginBuilder*) clearVersion {
  resultStreamBegin.hasVersion = NO;
  resultStreamBegin.version = @"";
  return self;
}
- (NSMutableArray<MessageBody*> *)bodys {
  return resultStreamBegin.bodysArray;
}
- (MessageBody*)bodysAtIndex:(NSUInteger)index {
  return [resultStreamBegin bodysAtIndex:index];
}
- (StreamBeginBuilder *)addBodys:(MessageBody*)value {
  if (resultStreamBegin.bodysArray == nil) {
    resultStreamBegin.bodysArray = [[NSMutableArray alloc]init];
  }
  [resultStreamBegin.bodysArray addObject:value];
  return self;
}
- (StreamBeginBuilder *)setBodysArray:(NSArray<MessageBody*> *)array {
  resultStreamBegin.bodysArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (StreamBeginBuilder *)clearBodys {
  resultStreamBegin.bodysArray = nil;
  return self;
}
@end

@interface StartTLS ()
@end

@implementation StartTLS

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static StartTLS* defaultStartTLSInstance = nil;
+ (void) initialize {
  if (self == [StartTLS class]) {
    defaultStartTLSInstance = [[StartTLS alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultStartTLSInstance;
}
- (instancetype) defaultInstance {
  return defaultStartTLSInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (StartTLS*) parseFromData:(NSData*) data {
  return (StartTLS*)[[[StartTLS builder] mergeFromData:data] build];
}
+ (StartTLS*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartTLS*)[[[StartTLS builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StartTLS*) parseFromInputStream:(NSInputStream*) input {
  return (StartTLS*)[[[StartTLS builder] mergeFromInputStream:input] build];
}
+ (StartTLS*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartTLS*)[[[StartTLS builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartTLS*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StartTLS*)[[[StartTLS builder] mergeFromCodedInputStream:input] build];
}
+ (StartTLS*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartTLS*)[[[StartTLS builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartTLSBuilder*) builder {
  return [[StartTLSBuilder alloc] init];
}
+ (StartTLSBuilder*) builderWithPrototype:(StartTLS*) prototype {
  return [[StartTLS builder] mergeFrom:prototype];
}
- (StartTLSBuilder*) builder {
  return [StartTLS builder];
}
- (StartTLSBuilder*) toBuilder {
  return [StartTLS builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StartTLS class]]) {
    return NO;
  }
  StartTLS *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StartTLSBuilder()
@property (strong) StartTLS* resultStartTls;
@end

@implementation StartTLSBuilder
@synthesize resultStartTls;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStartTls = [[StartTLS alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStartTls;
}
- (StartTLSBuilder*) clear {
  self.resultStartTls = [[StartTLS alloc] init];
  return self;
}
- (StartTLSBuilder*) clone {
  return [StartTLS builderWithPrototype:resultStartTls];
}
- (StartTLS*) defaultInstance {
  return [StartTLS defaultInstance];
}
- (StartTLS*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StartTLS*) buildPartial {
  StartTLS* returnMe = resultStartTls;
  self.resultStartTls = nil;
  return returnMe;
}
- (StartTLSBuilder*) mergeFrom:(StartTLS*) other {
  if (other == [StartTLS defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StartTLSBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StartTLSBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface ProceedTLS ()
@end

@implementation ProceedTLS

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static ProceedTLS* defaultProceedTLSInstance = nil;
+ (void) initialize {
  if (self == [ProceedTLS class]) {
    defaultProceedTLSInstance = [[ProceedTLS alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProceedTLSInstance;
}
- (instancetype) defaultInstance {
  return defaultProceedTLSInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProceedTLS*) parseFromData:(NSData*) data {
  return (ProceedTLS*)[[[ProceedTLS builder] mergeFromData:data] build];
}
+ (ProceedTLS*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProceedTLS*)[[[ProceedTLS builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProceedTLS*) parseFromInputStream:(NSInputStream*) input {
  return (ProceedTLS*)[[[ProceedTLS builder] mergeFromInputStream:input] build];
}
+ (ProceedTLS*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProceedTLS*)[[[ProceedTLS builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProceedTLS*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProceedTLS*)[[[ProceedTLS builder] mergeFromCodedInputStream:input] build];
}
+ (ProceedTLS*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProceedTLS*)[[[ProceedTLS builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProceedTLSBuilder*) builder {
  return [[ProceedTLSBuilder alloc] init];
}
+ (ProceedTLSBuilder*) builderWithPrototype:(ProceedTLS*) prototype {
  return [[ProceedTLS builder] mergeFrom:prototype];
}
- (ProceedTLSBuilder*) builder {
  return [ProceedTLS builder];
}
- (ProceedTLSBuilder*) toBuilder {
  return [ProceedTLS builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ProceedTLS class]]) {
    return NO;
  }
  ProceedTLS *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProceedTLSBuilder()
@property (strong) ProceedTLS* resultProceedTls;
@end

@implementation ProceedTLSBuilder
@synthesize resultProceedTls;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProceedTls = [[ProceedTLS alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProceedTls;
}
- (ProceedTLSBuilder*) clear {
  self.resultProceedTls = [[ProceedTLS alloc] init];
  return self;
}
- (ProceedTLSBuilder*) clone {
  return [ProceedTLS builderWithPrototype:resultProceedTls];
}
- (ProceedTLS*) defaultInstance {
  return [ProceedTLS defaultInstance];
}
- (ProceedTLS*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProceedTLS*) buildPartial {
  ProceedTLS* returnMe = resultProceedTls;
  self.resultProceedTls = nil;
  return returnMe;
}
- (ProceedTLSBuilder*) mergeFrom:(ProceedTLS*) other {
  if (other == [ProceedTLS defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProceedTLSBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProceedTLSBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface StreamEnd ()
@property (strong) NSString* reason;
@property SInt32 code;
@end

@implementation StreamEnd

- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.reason = @"";
    self.code = 0;
  }
  return self;
}
static StreamEnd* defaultStreamEndInstance = nil;
+ (void) initialize {
  if (self == [StreamEnd class]) {
    defaultStreamEndInstance = [[StreamEnd alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultStreamEndInstance;
}
- (instancetype) defaultInstance {
  return defaultStreamEndInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasReason) {
    [output writeString:1 value:self.reason];
  }
  if (self.hasCode) {
    [output writeInt32:2 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasReason) {
    size_ += computeStringSize(1, self.reason);
  }
  if (self.hasCode) {
    size_ += computeInt32Size(2, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (StreamEnd*) parseFromData:(NSData*) data {
  return (StreamEnd*)[[[StreamEnd builder] mergeFromData:data] build];
}
+ (StreamEnd*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StreamEnd*)[[[StreamEnd builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StreamEnd*) parseFromInputStream:(NSInputStream*) input {
  return (StreamEnd*)[[[StreamEnd builder] mergeFromInputStream:input] build];
}
+ (StreamEnd*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StreamEnd*)[[[StreamEnd builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StreamEnd*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StreamEnd*)[[[StreamEnd builder] mergeFromCodedInputStream:input] build];
}
+ (StreamEnd*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StreamEnd*)[[[StreamEnd builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StreamEndBuilder*) builder {
  return [[StreamEndBuilder alloc] init];
}
+ (StreamEndBuilder*) builderWithPrototype:(StreamEnd*) prototype {
  return [[StreamEnd builder] mergeFrom:prototype];
}
- (StreamEndBuilder*) builder {
  return [StreamEnd builder];
}
- (StreamEndBuilder*) toBuilder {
  return [StreamEnd builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasReason) {
    [dictionary setObject: self.reason forKey: @"reason"];
  }
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StreamEnd class]]) {
    return NO;
  }
  StreamEnd *otherMessage = other;
  return
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StreamEndBuilder()
@property (strong) StreamEnd* resultStreamEnd;
@end

@implementation StreamEndBuilder
@synthesize resultStreamEnd;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStreamEnd = [[StreamEnd alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStreamEnd;
}
- (StreamEndBuilder*) clear {
  self.resultStreamEnd = [[StreamEnd alloc] init];
  return self;
}
- (StreamEndBuilder*) clone {
  return [StreamEnd builderWithPrototype:resultStreamEnd];
}
- (StreamEnd*) defaultInstance {
  return [StreamEnd defaultInstance];
}
- (StreamEnd*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StreamEnd*) buildPartial {
  StreamEnd* returnMe = resultStreamEnd;
  self.resultStreamEnd = nil;
  return returnMe;
}
- (StreamEndBuilder*) mergeFrom:(StreamEnd*) other {
  if (other == [StreamEnd defaultInstance]) {
    return self;
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StreamEndBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StreamEndBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setReason:[input readString]];
        break;
      }
      case 16: {
        [self setCode:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasReason {
  return resultStreamEnd.hasReason;
}
- (NSString*) reason {
  return resultStreamEnd.reason;
}
- (StreamEndBuilder*) setReason:(NSString*) value {
  resultStreamEnd.hasReason = YES;
  resultStreamEnd.reason = value;
  return self;
}
- (StreamEndBuilder*) clearReason {
  resultStreamEnd.hasReason = NO;
  resultStreamEnd.reason = @"";
  return self;
}
- (BOOL) hasCode {
  return resultStreamEnd.hasCode;
}
- (SInt32) code {
  return resultStreamEnd.code;
}
- (StreamEndBuilder*) setCode:(SInt32) value {
  resultStreamEnd.hasCode = YES;
  resultStreamEnd.code = value;
  return self;
}
- (StreamEndBuilder*) clearCode {
  resultStreamEnd.hasCode = NO;
  resultStreamEnd.code = 0;
  return self;
}
@end

@interface UserConnect ()
@property (strong) NSString* domain;
@property (strong) NSString* version;
@end

@implementation UserConnect

- (BOOL) hasDomain {
  return !!hasDomain_;
}
- (void) setHasDomain:(BOOL) _value_ {
  hasDomain_ = !!_value_;
}
@synthesize domain;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (instancetype) init {
  if ((self = [super init])) {
    self.domain = @"";
    self.version = @"";
  }
  return self;
}
static UserConnect* defaultUserConnectInstance = nil;
+ (void) initialize {
  if (self == [UserConnect class]) {
    defaultUserConnectInstance = [[UserConnect alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserConnectInstance;
}
- (instancetype) defaultInstance {
  return defaultUserConnectInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDomain) {
    [output writeString:1 value:self.domain];
  }
  if (self.hasVersion) {
    [output writeString:2 value:self.version];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDomain) {
    size_ += computeStringSize(1, self.domain);
  }
  if (self.hasVersion) {
    size_ += computeStringSize(2, self.version);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserConnect*) parseFromData:(NSData*) data {
  return (UserConnect*)[[[UserConnect builder] mergeFromData:data] build];
}
+ (UserConnect*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserConnect*)[[[UserConnect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserConnect*) parseFromInputStream:(NSInputStream*) input {
  return (UserConnect*)[[[UserConnect builder] mergeFromInputStream:input] build];
}
+ (UserConnect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserConnect*)[[[UserConnect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserConnect*)[[[UserConnect builder] mergeFromCodedInputStream:input] build];
}
+ (UserConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserConnect*)[[[UserConnect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserConnectBuilder*) builder {
  return [[UserConnectBuilder alloc] init];
}
+ (UserConnectBuilder*) builderWithPrototype:(UserConnect*) prototype {
  return [[UserConnect builder] mergeFrom:prototype];
}
- (UserConnectBuilder*) builder {
  return [UserConnect builder];
}
- (UserConnectBuilder*) toBuilder {
  return [UserConnect builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDomain) {
    [output appendFormat:@"%@%@: %@\n", indent, @"domain", self.domain];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", self.version];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDomain) {
    [dictionary setObject: self.domain forKey: @"domain"];
  }
  if (self.hasVersion) {
    [dictionary setObject: self.version forKey: @"version"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserConnect class]]) {
    return NO;
  }
  UserConnect *otherMessage = other;
  return
      self.hasDomain == otherMessage.hasDomain &&
      (!self.hasDomain || [self.domain isEqual:otherMessage.domain]) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDomain) {
    hashCode = hashCode * 31 + [self.domain hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserConnectBuilder()
@property (strong) UserConnect* resultUserConnect;
@end

@implementation UserConnectBuilder
@synthesize resultUserConnect;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserConnect = [[UserConnect alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserConnect;
}
- (UserConnectBuilder*) clear {
  self.resultUserConnect = [[UserConnect alloc] init];
  return self;
}
- (UserConnectBuilder*) clone {
  return [UserConnect builderWithPrototype:resultUserConnect];
}
- (UserConnect*) defaultInstance {
  return [UserConnect defaultInstance];
}
- (UserConnect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserConnect*) buildPartial {
  UserConnect* returnMe = resultUserConnect;
  self.resultUserConnect = nil;
  return returnMe;
}
- (UserConnectBuilder*) mergeFrom:(UserConnect*) other {
  if (other == [UserConnect defaultInstance]) {
    return self;
  }
  if (other.hasDomain) {
    [self setDomain:other.domain];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserConnectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserConnectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDomain:[input readString]];
        break;
      }
      case 18: {
        [self setVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDomain {
  return resultUserConnect.hasDomain;
}
- (NSString*) domain {
  return resultUserConnect.domain;
}
- (UserConnectBuilder*) setDomain:(NSString*) value {
  resultUserConnect.hasDomain = YES;
  resultUserConnect.domain = value;
  return self;
}
- (UserConnectBuilder*) clearDomain {
  resultUserConnect.hasDomain = NO;
  resultUserConnect.domain = @"";
  return self;
}
- (BOOL) hasVersion {
  return resultUserConnect.hasVersion;
}
- (NSString*) version {
  return resultUserConnect.version;
}
- (UserConnectBuilder*) setVersion:(NSString*) value {
  resultUserConnect.hasVersion = YES;
  resultUserConnect.version = value;
  return self;
}
- (UserConnectBuilder*) clearVersion {
  resultUserConnect.hasVersion = NO;
  resultUserConnect.version = @"";
  return self;
}
@end

@interface Capability ()
@property (strong) NSString* version;
@property (strong) MessageBody* bodys;
@end

@implementation Capability

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasBodys {
  return !!hasBodys_;
}
- (void) setHasBodys:(BOOL) _value_ {
  hasBodys_ = !!_value_;
}
@synthesize bodys;
- (instancetype) init {
  if ((self = [super init])) {
    self.version = @"";
    self.bodys = [MessageBody defaultInstance];
  }
  return self;
}
static Capability* defaultCapabilityInstance = nil;
+ (void) initialize {
  if (self == [Capability class]) {
    defaultCapabilityInstance = [[Capability alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCapabilityInstance;
}
- (instancetype) defaultInstance {
  return defaultCapabilityInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeString:1 value:self.version];
  }
  if (self.hasBodys) {
    [output writeMessage:2 value:self.bodys];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasVersion) {
    size_ += computeStringSize(1, self.version);
  }
  if (self.hasBodys) {
    size_ += computeMessageSize(2, self.bodys);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Capability*) parseFromData:(NSData*) data {
  return (Capability*)[[[Capability builder] mergeFromData:data] build];
}
+ (Capability*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Capability*)[[[Capability builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Capability*) parseFromInputStream:(NSInputStream*) input {
  return (Capability*)[[[Capability builder] mergeFromInputStream:input] build];
}
+ (Capability*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Capability*)[[[Capability builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Capability*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Capability*)[[[Capability builder] mergeFromCodedInputStream:input] build];
}
+ (Capability*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Capability*)[[[Capability builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CapabilityBuilder*) builder {
  return [[CapabilityBuilder alloc] init];
}
+ (CapabilityBuilder*) builderWithPrototype:(Capability*) prototype {
  return [[Capability builder] mergeFrom:prototype];
}
- (CapabilityBuilder*) builder {
  return [Capability builder];
}
- (CapabilityBuilder*) toBuilder {
  return [Capability builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", self.version];
  }
  if (self.hasBodys) {
    [output appendFormat:@"%@%@ {\n", indent, @"bodys"];
    [self.bodys writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasVersion) {
    [dictionary setObject: self.version forKey: @"version"];
  }
  if (self.hasBodys) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.bodys storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"bodys"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Capability class]]) {
    return NO;
  }
  Capability *otherMessage = other;
  return
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      self.hasBodys == otherMessage.hasBodys &&
      (!self.hasBodys || [self.bodys isEqual:otherMessage.bodys]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  if (self.hasBodys) {
    hashCode = hashCode * 31 + [self.bodys hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CapabilityBuilder()
@property (strong) Capability* resultCapability;
@end

@implementation CapabilityBuilder
@synthesize resultCapability;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCapability = [[Capability alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCapability;
}
- (CapabilityBuilder*) clear {
  self.resultCapability = [[Capability alloc] init];
  return self;
}
- (CapabilityBuilder*) clone {
  return [Capability builderWithPrototype:resultCapability];
}
- (Capability*) defaultInstance {
  return [Capability defaultInstance];
}
- (Capability*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Capability*) buildPartial {
  Capability* returnMe = resultCapability;
  self.resultCapability = nil;
  return returnMe;
}
- (CapabilityBuilder*) mergeFrom:(Capability*) other {
  if (other == [Capability defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasBodys) {
    [self mergeBodys:other.bodys];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CapabilityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CapabilityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setVersion:[input readString]];
        break;
      }
      case 18: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        if (self.hasBodys) {
          [subBuilder mergeFrom:self.bodys];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBodys:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return resultCapability.hasVersion;
}
- (NSString*) version {
  return resultCapability.version;
}
- (CapabilityBuilder*) setVersion:(NSString*) value {
  resultCapability.hasVersion = YES;
  resultCapability.version = value;
  return self;
}
- (CapabilityBuilder*) clearVersion {
  resultCapability.hasVersion = NO;
  resultCapability.version = @"";
  return self;
}
- (BOOL) hasBodys {
  return resultCapability.hasBodys;
}
- (MessageBody*) bodys {
  return resultCapability.bodys;
}
- (CapabilityBuilder*) setBodys:(MessageBody*) value {
  resultCapability.hasBodys = YES;
  resultCapability.bodys = value;
  return self;
}
- (CapabilityBuilder*) setBodysBuilder:(MessageBodyBuilder*) builderForValue {
  return [self setBodys:[builderForValue build]];
}
- (CapabilityBuilder*) mergeBodys:(MessageBody*) value {
  if (resultCapability.hasBodys &&
      resultCapability.bodys != [MessageBody defaultInstance]) {
    resultCapability.bodys =
      [[[MessageBody builderWithPrototype:resultCapability.bodys] mergeFrom:value] buildPartial];
  } else {
    resultCapability.bodys = value;
  }
  resultCapability.hasBodys = YES;
  return self;
}
- (CapabilityBuilder*) clearBodys {
  resultCapability.hasBodys = NO;
  resultCapability.bodys = [MessageBody defaultInstance];
  return self;
}
@end

@interface ResponseSucceeded ()
@property SInt32 code;
@property (strong) NSString* msgId;
@property (strong) NSString* info;
@property (strong) MessageBody* body;
@end

@implementation ResponseSucceeded

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasMsgId {
  return !!hasMsgId_;
}
- (void) setHasMsgId:(BOOL) _value_ {
  hasMsgId_ = !!_value_;
}
@synthesize msgId;
- (BOOL) hasInfo {
  return !!hasInfo_;
}
- (void) setHasInfo:(BOOL) _value_ {
  hasInfo_ = !!_value_;
}
@synthesize info;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
- (instancetype) init {
  if ((self = [super init])) {
    self.code = 0;
    self.msgId = @"";
    self.info = @"";
    self.body = [MessageBody defaultInstance];
  }
  return self;
}
static ResponseSucceeded* defaultResponseSucceededInstance = nil;
+ (void) initialize {
  if (self == [ResponseSucceeded class]) {
    defaultResponseSucceededInstance = [[ResponseSucceeded alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseSucceededInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseSucceededInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeInt32:1 value:self.code];
  }
  if (self.hasMsgId) {
    [output writeString:2 value:self.msgId];
  }
  if (self.hasInfo) {
    [output writeString:3 value:self.info];
  }
  if (self.hasBody) {
    [output writeMessage:4 value:self.body];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCode) {
    size_ += computeInt32Size(1, self.code);
  }
  if (self.hasMsgId) {
    size_ += computeStringSize(2, self.msgId);
  }
  if (self.hasInfo) {
    size_ += computeStringSize(3, self.info);
  }
  if (self.hasBody) {
    size_ += computeMessageSize(4, self.body);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseSucceeded*) parseFromData:(NSData*) data {
  return (ResponseSucceeded*)[[[ResponseSucceeded builder] mergeFromData:data] build];
}
+ (ResponseSucceeded*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseSucceeded*)[[[ResponseSucceeded builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseSucceeded*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseSucceeded*)[[[ResponseSucceeded builder] mergeFromInputStream:input] build];
}
+ (ResponseSucceeded*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseSucceeded*)[[[ResponseSucceeded builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseSucceeded*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseSucceeded*)[[[ResponseSucceeded builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseSucceeded*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseSucceeded*)[[[ResponseSucceeded builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseSucceededBuilder*) builder {
  return [[ResponseSucceededBuilder alloc] init];
}
+ (ResponseSucceededBuilder*) builderWithPrototype:(ResponseSucceeded*) prototype {
  return [[ResponseSucceeded builder] mergeFrom:prototype];
}
- (ResponseSucceededBuilder*) builder {
  return [ResponseSucceeded builder];
}
- (ResponseSucceededBuilder*) toBuilder {
  return [ResponseSucceeded builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgId", self.msgId];
  }
  if (self.hasInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"info", self.info];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@ {\n", indent, @"body"];
    [self.body writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasMsgId) {
    [dictionary setObject: self.msgId forKey: @"msgId"];
  }
  if (self.hasInfo) {
    [dictionary setObject: self.info forKey: @"info"];
  }
  if (self.hasBody) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.body storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"body"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseSucceeded class]]) {
    return NO;
  }
  ResponseSucceeded *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasMsgId == otherMessage.hasMsgId &&
      (!self.hasMsgId || [self.msgId isEqual:otherMessage.msgId]) &&
      self.hasInfo == otherMessage.hasInfo &&
      (!self.hasInfo || [self.info isEqual:otherMessage.info]) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasMsgId) {
    hashCode = hashCode * 31 + [self.msgId hash];
  }
  if (self.hasInfo) {
    hashCode = hashCode * 31 + [self.info hash];
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseSucceededBuilder()
@property (strong) ResponseSucceeded* resultResponseSucceeded;
@end

@implementation ResponseSucceededBuilder
@synthesize resultResponseSucceeded;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseSucceeded = [[ResponseSucceeded alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseSucceeded;
}
- (ResponseSucceededBuilder*) clear {
  self.resultResponseSucceeded = [[ResponseSucceeded alloc] init];
  return self;
}
- (ResponseSucceededBuilder*) clone {
  return [ResponseSucceeded builderWithPrototype:resultResponseSucceeded];
}
- (ResponseSucceeded*) defaultInstance {
  return [ResponseSucceeded defaultInstance];
}
- (ResponseSucceeded*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseSucceeded*) buildPartial {
  ResponseSucceeded* returnMe = resultResponseSucceeded;
  self.resultResponseSucceeded = nil;
  return returnMe;
}
- (ResponseSucceededBuilder*) mergeFrom:(ResponseSucceeded*) other {
  if (other == [ResponseSucceeded defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasMsgId) {
    [self setMsgId:other.msgId];
  }
  if (other.hasInfo) {
    [self setInfo:other.info];
  }
  if (other.hasBody) {
    [self mergeBody:other.body];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseSucceededBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseSucceededBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCode:[input readInt32]];
        break;
      }
      case 18: {
        [self setMsgId:[input readString]];
        break;
      }
      case 26: {
        [self setInfo:[input readString]];
        break;
      }
      case 34: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        if (self.hasBody) {
          [subBuilder mergeFrom:self.body];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBody:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return resultResponseSucceeded.hasCode;
}
- (SInt32) code {
  return resultResponseSucceeded.code;
}
- (ResponseSucceededBuilder*) setCode:(SInt32) value {
  resultResponseSucceeded.hasCode = YES;
  resultResponseSucceeded.code = value;
  return self;
}
- (ResponseSucceededBuilder*) clearCode {
  resultResponseSucceeded.hasCode = NO;
  resultResponseSucceeded.code = 0;
  return self;
}
- (BOOL) hasMsgId {
  return resultResponseSucceeded.hasMsgId;
}
- (NSString*) msgId {
  return resultResponseSucceeded.msgId;
}
- (ResponseSucceededBuilder*) setMsgId:(NSString*) value {
  resultResponseSucceeded.hasMsgId = YES;
  resultResponseSucceeded.msgId = value;
  return self;
}
- (ResponseSucceededBuilder*) clearMsgId {
  resultResponseSucceeded.hasMsgId = NO;
  resultResponseSucceeded.msgId = @"";
  return self;
}
- (BOOL) hasInfo {
  return resultResponseSucceeded.hasInfo;
}
- (NSString*) info {
  return resultResponseSucceeded.info;
}
- (ResponseSucceededBuilder*) setInfo:(NSString*) value {
  resultResponseSucceeded.hasInfo = YES;
  resultResponseSucceeded.info = value;
  return self;
}
- (ResponseSucceededBuilder*) clearInfo {
  resultResponseSucceeded.hasInfo = NO;
  resultResponseSucceeded.info = @"";
  return self;
}
- (BOOL) hasBody {
  return resultResponseSucceeded.hasBody;
}
- (MessageBody*) body {
  return resultResponseSucceeded.body;
}
- (ResponseSucceededBuilder*) setBody:(MessageBody*) value {
  resultResponseSucceeded.hasBody = YES;
  resultResponseSucceeded.body = value;
  return self;
}
- (ResponseSucceededBuilder*) setBodyBuilder:(MessageBodyBuilder*) builderForValue {
  return [self setBody:[builderForValue build]];
}
- (ResponseSucceededBuilder*) mergeBody:(MessageBody*) value {
  if (resultResponseSucceeded.hasBody &&
      resultResponseSucceeded.body != [MessageBody defaultInstance]) {
    resultResponseSucceeded.body =
      [[[MessageBody builderWithPrototype:resultResponseSucceeded.body] mergeFrom:value] buildPartial];
  } else {
    resultResponseSucceeded.body = value;
  }
  resultResponseSucceeded.hasBody = YES;
  return self;
}
- (ResponseSucceededBuilder*) clearBody {
  resultResponseSucceeded.hasBody = NO;
  resultResponseSucceeded.body = [MessageBody defaultInstance];
  return self;
}
@end

@interface ResponseFailure ()
@property SInt32 code;
@property (strong) NSString* msgId;
@property (strong) NSString* error;
@property (strong) MessageBody* body;
@end

@implementation ResponseFailure

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasMsgId {
  return !!hasMsgId_;
}
- (void) setHasMsgId:(BOOL) _value_ {
  hasMsgId_ = !!_value_;
}
@synthesize msgId;
- (BOOL) hasError {
  return !!hasError_;
}
- (void) setHasError:(BOOL) _value_ {
  hasError_ = !!_value_;
}
@synthesize error;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
- (instancetype) init {
  if ((self = [super init])) {
    self.code = 0;
    self.msgId = @"";
    self.error = @"";
    self.body = [MessageBody defaultInstance];
  }
  return self;
}
static ResponseFailure* defaultResponseFailureInstance = nil;
+ (void) initialize {
  if (self == [ResponseFailure class]) {
    defaultResponseFailureInstance = [[ResponseFailure alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseFailureInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseFailureInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeInt32:1 value:self.code];
  }
  if (self.hasMsgId) {
    [output writeString:2 value:self.msgId];
  }
  if (self.hasError) {
    [output writeString:3 value:self.error];
  }
  if (self.hasBody) {
    [output writeMessage:4 value:self.body];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCode) {
    size_ += computeInt32Size(1, self.code);
  }
  if (self.hasMsgId) {
    size_ += computeStringSize(2, self.msgId);
  }
  if (self.hasError) {
    size_ += computeStringSize(3, self.error);
  }
  if (self.hasBody) {
    size_ += computeMessageSize(4, self.body);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseFailure*) parseFromData:(NSData*) data {
  return (ResponseFailure*)[[[ResponseFailure builder] mergeFromData:data] build];
}
+ (ResponseFailure*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseFailure*)[[[ResponseFailure builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseFailure*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseFailure*)[[[ResponseFailure builder] mergeFromInputStream:input] build];
}
+ (ResponseFailure*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseFailure*)[[[ResponseFailure builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseFailure*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseFailure*)[[[ResponseFailure builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseFailure*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseFailure*)[[[ResponseFailure builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseFailureBuilder*) builder {
  return [[ResponseFailureBuilder alloc] init];
}
+ (ResponseFailureBuilder*) builderWithPrototype:(ResponseFailure*) prototype {
  return [[ResponseFailure builder] mergeFrom:prototype];
}
- (ResponseFailureBuilder*) builder {
  return [ResponseFailure builder];
}
- (ResponseFailureBuilder*) toBuilder {
  return [ResponseFailure builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgId", self.msgId];
  }
  if (self.hasError) {
    [output appendFormat:@"%@%@: %@\n", indent, @"error", self.error];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@ {\n", indent, @"body"];
    [self.body writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasMsgId) {
    [dictionary setObject: self.msgId forKey: @"msgId"];
  }
  if (self.hasError) {
    [dictionary setObject: self.error forKey: @"error"];
  }
  if (self.hasBody) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.body storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"body"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseFailure class]]) {
    return NO;
  }
  ResponseFailure *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasMsgId == otherMessage.hasMsgId &&
      (!self.hasMsgId || [self.msgId isEqual:otherMessage.msgId]) &&
      self.hasError == otherMessage.hasError &&
      (!self.hasError || [self.error isEqual:otherMessage.error]) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasMsgId) {
    hashCode = hashCode * 31 + [self.msgId hash];
  }
  if (self.hasError) {
    hashCode = hashCode * 31 + [self.error hash];
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseFailureBuilder()
@property (strong) ResponseFailure* resultResponseFailure;
@end

@implementation ResponseFailureBuilder
@synthesize resultResponseFailure;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseFailure = [[ResponseFailure alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseFailure;
}
- (ResponseFailureBuilder*) clear {
  self.resultResponseFailure = [[ResponseFailure alloc] init];
  return self;
}
- (ResponseFailureBuilder*) clone {
  return [ResponseFailure builderWithPrototype:resultResponseFailure];
}
- (ResponseFailure*) defaultInstance {
  return [ResponseFailure defaultInstance];
}
- (ResponseFailure*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseFailure*) buildPartial {
  ResponseFailure* returnMe = resultResponseFailure;
  self.resultResponseFailure = nil;
  return returnMe;
}
- (ResponseFailureBuilder*) mergeFrom:(ResponseFailure*) other {
  if (other == [ResponseFailure defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasMsgId) {
    [self setMsgId:other.msgId];
  }
  if (other.hasError) {
    [self setError:other.error];
  }
  if (other.hasBody) {
    [self mergeBody:other.body];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseFailureBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseFailureBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCode:[input readInt32]];
        break;
      }
      case 18: {
        [self setMsgId:[input readString]];
        break;
      }
      case 26: {
        [self setError:[input readString]];
        break;
      }
      case 34: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        if (self.hasBody) {
          [subBuilder mergeFrom:self.body];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBody:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return resultResponseFailure.hasCode;
}
- (SInt32) code {
  return resultResponseFailure.code;
}
- (ResponseFailureBuilder*) setCode:(SInt32) value {
  resultResponseFailure.hasCode = YES;
  resultResponseFailure.code = value;
  return self;
}
- (ResponseFailureBuilder*) clearCode {
  resultResponseFailure.hasCode = NO;
  resultResponseFailure.code = 0;
  return self;
}
- (BOOL) hasMsgId {
  return resultResponseFailure.hasMsgId;
}
- (NSString*) msgId {
  return resultResponseFailure.msgId;
}
- (ResponseFailureBuilder*) setMsgId:(NSString*) value {
  resultResponseFailure.hasMsgId = YES;
  resultResponseFailure.msgId = value;
  return self;
}
- (ResponseFailureBuilder*) clearMsgId {
  resultResponseFailure.hasMsgId = NO;
  resultResponseFailure.msgId = @"";
  return self;
}
- (BOOL) hasError {
  return resultResponseFailure.hasError;
}
- (NSString*) error {
  return resultResponseFailure.error;
}
- (ResponseFailureBuilder*) setError:(NSString*) value {
  resultResponseFailure.hasError = YES;
  resultResponseFailure.error = value;
  return self;
}
- (ResponseFailureBuilder*) clearError {
  resultResponseFailure.hasError = NO;
  resultResponseFailure.error = @"";
  return self;
}
- (BOOL) hasBody {
  return resultResponseFailure.hasBody;
}
- (MessageBody*) body {
  return resultResponseFailure.body;
}
- (ResponseFailureBuilder*) setBody:(MessageBody*) value {
  resultResponseFailure.hasBody = YES;
  resultResponseFailure.body = value;
  return self;
}
- (ResponseFailureBuilder*) setBodyBuilder:(MessageBodyBuilder*) builderForValue {
  return [self setBody:[builderForValue build]];
}
- (ResponseFailureBuilder*) mergeBody:(MessageBody*) value {
  if (resultResponseFailure.hasBody &&
      resultResponseFailure.body != [MessageBody defaultInstance]) {
    resultResponseFailure.body =
      [[[MessageBody builderWithPrototype:resultResponseFailure.body] mergeFrom:value] buildPartial];
  } else {
    resultResponseFailure.body = value;
  }
  resultResponseFailure.hasBody = YES;
  return self;
}
- (ResponseFailureBuilder*) clearBody {
  resultResponseFailure.hasBody = NO;
  resultResponseFailure.body = [MessageBody defaultInstance];
  return self;
}
@end

@interface ProtoMessage ()
@property SInt32 options;
@property SInt32 signalType;
@property (strong) NSString* pb_from;
@property (strong) NSString* to;
@property (strong) NSData* message;
@property (strong) NSString* realfrom;
@property (strong) NSString* realto;
@property (strong) NSString* originfrom;
@property (strong) NSString* originto;
@property (strong) NSString* origintype;
@property (strong) NSString* sendjid;
@end

@implementation ProtoMessage

- (BOOL) hasOptions {
  return !!hasOptions_;
}
- (void) setHasOptions:(BOOL) _value_ {
  hasOptions_ = !!_value_;
}
@synthesize options;
- (BOOL) hasSignalType {
  return !!hasSignalType_;
}
- (void) setHasSignalType:(BOOL) _value_ {
  hasSignalType_ = !!_value_;
}
@synthesize signalType;
- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) _value_ {
  hasFrom_ = !!_value_;
}
@synthesize pb_from;
- (BOOL) hasTo {
  return !!hasTo_;
}
- (void) setHasTo:(BOOL) _value_ {
  hasTo_ = !!_value_;
}
@synthesize to;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (BOOL) hasRealfrom {
  return !!hasRealfrom_;
}
- (void) setHasRealfrom:(BOOL) _value_ {
  hasRealfrom_ = !!_value_;
}
@synthesize realfrom;
- (BOOL) hasRealto {
  return !!hasRealto_;
}
- (void) setHasRealto:(BOOL) _value_ {
  hasRealto_ = !!_value_;
}
@synthesize realto;
- (BOOL) hasOriginfrom {
  return !!hasOriginfrom_;
}
- (void) setHasOriginfrom:(BOOL) _value_ {
  hasOriginfrom_ = !!_value_;
}
@synthesize originfrom;
- (BOOL) hasOriginto {
  return !!hasOriginto_;
}
- (void) setHasOriginto:(BOOL) _value_ {
  hasOriginto_ = !!_value_;
}
@synthesize originto;
- (BOOL) hasOrigintype {
  return !!hasOrigintype_;
}
- (void) setHasOrigintype:(BOOL) _value_ {
  hasOrigintype_ = !!_value_;
}
@synthesize origintype;
- (BOOL) hasSendjid {
  return !!hasSendjid_;
}
- (void) setHasSendjid:(BOOL) _value_ {
  hasSendjid_ = !!_value_;
}
@synthesize sendjid;
- (instancetype) init {
  if ((self = [super init])) {
    self.options = 0;
    self.signalType = 0;
    self.pb_from = @"";
    self.to = @"";
    self.message = [NSData data];
    self.realfrom = @"";
    self.realto = @"";
    self.originfrom = @"";
    self.originto = @"";
    self.origintype = @"";
    self.sendjid = @"";
  }
  return self;
}
static ProtoMessage* defaultProtoMessageInstance = nil;
+ (void) initialize {
  if (self == [ProtoMessage class]) {
    defaultProtoMessageInstance = [[ProtoMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProtoMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultProtoMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSignalType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOptions) {
    [output writeInt32:1 value:self.options];
  }
  if (self.hasSignalType) {
    [output writeInt32:2 value:self.signalType];
  }
  if (self.hasFrom) {
    [output writeString:3 value:self.pb_from];
  }
  if (self.hasTo) {
    [output writeString:4 value:self.to];
  }
  if (self.hasMessage) {
    [output writeData:5 value:self.message];
  }
  if (self.hasRealfrom) {
    [output writeString:6 value:self.realfrom];
  }
  if (self.hasRealto) {
    [output writeString:7 value:self.realto];
  }
  if (self.hasOriginfrom) {
    [output writeString:8 value:self.originfrom];
  }
  if (self.hasOriginto) {
    [output writeString:9 value:self.originto];
  }
  if (self.hasOrigintype) {
    [output writeString:10 value:self.origintype];
  }
  if (self.hasSendjid) {
    [output writeString:11 value:self.sendjid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOptions) {
    size_ += computeInt32Size(1, self.options);
  }
  if (self.hasSignalType) {
    size_ += computeInt32Size(2, self.signalType);
  }
  if (self.hasFrom) {
    size_ += computeStringSize(3, self.pb_from);
  }
  if (self.hasTo) {
    size_ += computeStringSize(4, self.to);
  }
  if (self.hasMessage) {
    size_ += computeDataSize(5, self.message);
  }
  if (self.hasRealfrom) {
    size_ += computeStringSize(6, self.realfrom);
  }
  if (self.hasRealto) {
    size_ += computeStringSize(7, self.realto);
  }
  if (self.hasOriginfrom) {
    size_ += computeStringSize(8, self.originfrom);
  }
  if (self.hasOriginto) {
    size_ += computeStringSize(9, self.originto);
  }
  if (self.hasOrigintype) {
    size_ += computeStringSize(10, self.origintype);
  }
  if (self.hasSendjid) {
    size_ += computeStringSize(11, self.sendjid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProtoMessage*) parseFromData:(NSData*) data {
  return (ProtoMessage*)[[[ProtoMessage builder] mergeFromData:data] build];
}
+ (ProtoMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoMessage*)[[[ProtoMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProtoMessage*) parseFromInputStream:(NSInputStream*) input {
  return (ProtoMessage*)[[[ProtoMessage builder] mergeFromInputStream:input] build];
}
+ (ProtoMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoMessage*)[[[ProtoMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProtoMessage*)[[[ProtoMessage builder] mergeFromCodedInputStream:input] build];
}
+ (ProtoMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoMessage*)[[[ProtoMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoMessageBuilder*) builder {
  return [[ProtoMessageBuilder alloc] init];
}
+ (ProtoMessageBuilder*) builderWithPrototype:(ProtoMessage*) prototype {
  return [[ProtoMessage builder] mergeFrom:prototype];
}
- (ProtoMessageBuilder*) builder {
  return [ProtoMessage builder];
}
- (ProtoMessageBuilder*) toBuilder {
  return [ProtoMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOptions) {
    [output appendFormat:@"%@%@: %@\n", indent, @"options", [NSNumber numberWithInteger:self.options]];
  }
  if (self.hasSignalType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signalType", [NSNumber numberWithInteger:self.signalType]];
  }
  if (self.hasFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_from", self.pb_from];
  }
  if (self.hasTo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"to", self.to];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasRealfrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"realfrom", self.realfrom];
  }
  if (self.hasRealto) {
    [output appendFormat:@"%@%@: %@\n", indent, @"realto", self.realto];
  }
  if (self.hasOriginfrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"originfrom", self.originfrom];
  }
  if (self.hasOriginto) {
    [output appendFormat:@"%@%@: %@\n", indent, @"originto", self.originto];
  }
  if (self.hasOrigintype) {
    [output appendFormat:@"%@%@: %@\n", indent, @"origintype", self.origintype];
  }
  if (self.hasSendjid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendjid", self.sendjid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOptions) {
    [dictionary setObject: [NSNumber numberWithInteger:self.options] forKey: @"options"];
  }
  if (self.hasSignalType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.signalType] forKey: @"signalType"];
  }
  if (self.hasFrom) {
    [dictionary setObject: self.pb_from forKey: @"pb_from"];
  }
  if (self.hasTo) {
    [dictionary setObject: self.to forKey: @"to"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  if (self.hasRealfrom) {
    [dictionary setObject: self.realfrom forKey: @"realfrom"];
  }
  if (self.hasRealto) {
    [dictionary setObject: self.realto forKey: @"realto"];
  }
  if (self.hasOriginfrom) {
    [dictionary setObject: self.originfrom forKey: @"originfrom"];
  }
  if (self.hasOriginto) {
    [dictionary setObject: self.originto forKey: @"originto"];
  }
  if (self.hasOrigintype) {
    [dictionary setObject: self.origintype forKey: @"origintype"];
  }
  if (self.hasSendjid) {
    [dictionary setObject: self.sendjid forKey: @"sendjid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ProtoMessage class]]) {
    return NO;
  }
  ProtoMessage *otherMessage = other;
  return
      self.hasOptions == otherMessage.hasOptions &&
      (!self.hasOptions || self.options == otherMessage.options) &&
      self.hasSignalType == otherMessage.hasSignalType &&
      (!self.hasSignalType || self.signalType == otherMessage.signalType) &&
      self.hasFrom == otherMessage.hasFrom &&
      (!self.hasFrom || [self.pb_from isEqual:otherMessage.pb_from]) &&
      self.hasTo == otherMessage.hasTo &&
      (!self.hasTo || [self.to isEqual:otherMessage.to]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasRealfrom == otherMessage.hasRealfrom &&
      (!self.hasRealfrom || [self.realfrom isEqual:otherMessage.realfrom]) &&
      self.hasRealto == otherMessage.hasRealto &&
      (!self.hasRealto || [self.realto isEqual:otherMessage.realto]) &&
      self.hasOriginfrom == otherMessage.hasOriginfrom &&
      (!self.hasOriginfrom || [self.originfrom isEqual:otherMessage.originfrom]) &&
      self.hasOriginto == otherMessage.hasOriginto &&
      (!self.hasOriginto || [self.originto isEqual:otherMessage.originto]) &&
      self.hasOrigintype == otherMessage.hasOrigintype &&
      (!self.hasOrigintype || [self.origintype isEqual:otherMessage.origintype]) &&
      self.hasSendjid == otherMessage.hasSendjid &&
      (!self.hasSendjid || [self.sendjid isEqual:otherMessage.sendjid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOptions) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.options] hash];
  }
  if (self.hasSignalType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.signalType] hash];
  }
  if (self.hasFrom) {
    hashCode = hashCode * 31 + [self.pb_from hash];
  }
  if (self.hasTo) {
    hashCode = hashCode * 31 + [self.to hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasRealfrom) {
    hashCode = hashCode * 31 + [self.realfrom hash];
  }
  if (self.hasRealto) {
    hashCode = hashCode * 31 + [self.realto hash];
  }
  if (self.hasOriginfrom) {
    hashCode = hashCode * 31 + [self.originfrom hash];
  }
  if (self.hasOriginto) {
    hashCode = hashCode * 31 + [self.originto hash];
  }
  if (self.hasOrigintype) {
    hashCode = hashCode * 31 + [self.origintype hash];
  }
  if (self.hasSendjid) {
    hashCode = hashCode * 31 + [self.sendjid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProtoMessageBuilder()
@property (strong) ProtoMessage* resultProtoMessage;
@end

@implementation ProtoMessageBuilder
@synthesize resultProtoMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProtoMessage = [[ProtoMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProtoMessage;
}
- (ProtoMessageBuilder*) clear {
  self.resultProtoMessage = [[ProtoMessage alloc] init];
  return self;
}
- (ProtoMessageBuilder*) clone {
  return [ProtoMessage builderWithPrototype:resultProtoMessage];
}
- (ProtoMessage*) defaultInstance {
  return [ProtoMessage defaultInstance];
}
- (ProtoMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProtoMessage*) buildPartial {
  ProtoMessage* returnMe = resultProtoMessage;
  self.resultProtoMessage = nil;
  return returnMe;
}
- (ProtoMessageBuilder*) mergeFrom:(ProtoMessage*) other {
  if (other == [ProtoMessage defaultInstance]) {
    return self;
  }
  if (other.hasOptions) {
    [self setOptions:other.options];
  }
  if (other.hasSignalType) {
    [self setSignalType:other.signalType];
  }
  if (other.hasFrom) {
    [self setFrom:other.pb_from];
  }
  if (other.hasTo) {
    [self setTo:other.to];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasRealfrom) {
    [self setRealfrom:other.realfrom];
  }
  if (other.hasRealto) {
    [self setRealto:other.realto];
  }
  if (other.hasOriginfrom) {
    [self setOriginfrom:other.originfrom];
  }
  if (other.hasOriginto) {
    [self setOriginto:other.originto];
  }
  if (other.hasOrigintype) {
    [self setOrigintype:other.origintype];
  }
  if (other.hasSendjid) {
    [self setSendjid:other.sendjid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProtoMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProtoMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOptions:[input readInt32]];
        break;
      }
      case 16: {
        [self setSignalType:[input readInt32]];
        break;
      }
      case 26: {
        [self setFrom:[input readString]];
        break;
      }
      case 34: {
        [self setTo:[input readString]];
        break;
      }
      case 42: {
        [self setMessage:[input readData]];
        break;
      }
      case 50: {
        [self setRealfrom:[input readString]];
        break;
      }
      case 58: {
        [self setRealto:[input readString]];
        break;
      }
      case 66: {
        [self setOriginfrom:[input readString]];
        break;
      }
      case 74: {
        [self setOriginto:[input readString]];
        break;
      }
      case 82: {
        [self setOrigintype:[input readString]];
        break;
      }
      case 90: {
        [self setSendjid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasOptions {
  return resultProtoMessage.hasOptions;
}
- (SInt32) options {
  return resultProtoMessage.options;
}
- (ProtoMessageBuilder*) setOptions:(SInt32) value {
  resultProtoMessage.hasOptions = YES;
  resultProtoMessage.options = value;
  return self;
}
- (ProtoMessageBuilder*) clearOptions {
  resultProtoMessage.hasOptions = NO;
  resultProtoMessage.options = 0;
  return self;
}
- (BOOL) hasSignalType {
  return resultProtoMessage.hasSignalType;
}
- (SInt32) signalType {
  return resultProtoMessage.signalType;
}
- (ProtoMessageBuilder*) setSignalType:(SInt32) value {
  resultProtoMessage.hasSignalType = YES;
  resultProtoMessage.signalType = value;
  return self;
}
- (ProtoMessageBuilder*) clearSignalType {
  resultProtoMessage.hasSignalType = NO;
  resultProtoMessage.signalType = 0;
  return self;
}
- (BOOL) hasFrom {
  return resultProtoMessage.hasFrom;
}
- (NSString*) pb_from {
  return resultProtoMessage.pb_from;
}
- (ProtoMessageBuilder*) setFrom:(NSString*) value {
  resultProtoMessage.hasFrom = YES;
  resultProtoMessage.pb_from = value;
  return self;
}
- (ProtoMessageBuilder*) clearFrom {
  resultProtoMessage.hasFrom = NO;
  resultProtoMessage.pb_from = @"";
  return self;
}
- (BOOL) hasTo {
  return resultProtoMessage.hasTo;
}
- (NSString*) to {
  return resultProtoMessage.to;
}
- (ProtoMessageBuilder*) setTo:(NSString*) value {
  resultProtoMessage.hasTo = YES;
  resultProtoMessage.to = value;
  return self;
}
- (ProtoMessageBuilder*) clearTo {
  resultProtoMessage.hasTo = NO;
  resultProtoMessage.to = @"";
  return self;
}
- (BOOL) hasMessage {
  return resultProtoMessage.hasMessage;
}
- (NSData*) message {
  return resultProtoMessage.message;
}
- (ProtoMessageBuilder*) setMessage:(NSData*) value {
  resultProtoMessage.hasMessage = YES;
  resultProtoMessage.message = value;
  return self;
}
- (ProtoMessageBuilder*) clearMessage {
  resultProtoMessage.hasMessage = NO;
  resultProtoMessage.message = [NSData data];
  return self;
}
- (BOOL) hasRealfrom {
  return resultProtoMessage.hasRealfrom;
}
- (NSString*) realfrom {
  return resultProtoMessage.realfrom;
}
- (ProtoMessageBuilder*) setRealfrom:(NSString*) value {
  resultProtoMessage.hasRealfrom = YES;
  resultProtoMessage.realfrom = value;
  return self;
}
- (ProtoMessageBuilder*) clearRealfrom {
  resultProtoMessage.hasRealfrom = NO;
  resultProtoMessage.realfrom = @"";
  return self;
}
- (BOOL) hasRealto {
  return resultProtoMessage.hasRealto;
}
- (NSString*) realto {
  return resultProtoMessage.realto;
}
- (ProtoMessageBuilder*) setRealto:(NSString*) value {
  resultProtoMessage.hasRealto = YES;
  resultProtoMessage.realto = value;
  return self;
}
- (ProtoMessageBuilder*) clearRealto {
  resultProtoMessage.hasRealto = NO;
  resultProtoMessage.realto = @"";
  return self;
}
- (BOOL) hasOriginfrom {
  return resultProtoMessage.hasOriginfrom;
}
- (NSString*) originfrom {
  return resultProtoMessage.originfrom;
}
- (ProtoMessageBuilder*) setOriginfrom:(NSString*) value {
  resultProtoMessage.hasOriginfrom = YES;
  resultProtoMessage.originfrom = value;
  return self;
}
- (ProtoMessageBuilder*) clearOriginfrom {
  resultProtoMessage.hasOriginfrom = NO;
  resultProtoMessage.originfrom = @"";
  return self;
}
- (BOOL) hasOriginto {
  return resultProtoMessage.hasOriginto;
}
- (NSString*) originto {
  return resultProtoMessage.originto;
}
- (ProtoMessageBuilder*) setOriginto:(NSString*) value {
  resultProtoMessage.hasOriginto = YES;
  resultProtoMessage.originto = value;
  return self;
}
- (ProtoMessageBuilder*) clearOriginto {
  resultProtoMessage.hasOriginto = NO;
  resultProtoMessage.originto = @"";
  return self;
}
- (BOOL) hasOrigintype {
  return resultProtoMessage.hasOrigintype;
}
- (NSString*) origintype {
  return resultProtoMessage.origintype;
}
- (ProtoMessageBuilder*) setOrigintype:(NSString*) value {
  resultProtoMessage.hasOrigintype = YES;
  resultProtoMessage.origintype = value;
  return self;
}
- (ProtoMessageBuilder*) clearOrigintype {
  resultProtoMessage.hasOrigintype = NO;
  resultProtoMessage.origintype = @"";
  return self;
}
- (BOOL) hasSendjid {
  return resultProtoMessage.hasSendjid;
}
- (NSString*) sendjid {
  return resultProtoMessage.sendjid;
}
- (ProtoMessageBuilder*) setSendjid:(NSString*) value {
  resultProtoMessage.hasSendjid = YES;
  resultProtoMessage.sendjid = value;
  return self;
}
- (ProtoMessageBuilder*) clearSendjid {
  resultProtoMessage.hasSendjid = NO;
  resultProtoMessage.sendjid = @"";
  return self;
}
@end

@interface MessageBody ()
@property (strong) NSMutableArray<StringHeader*> * headersArray;
@property (strong) NSString* value;
@property (strong) NSMutableArray<MessageBody*> * bodysArray;
@end

@implementation MessageBody

@synthesize headersArray;
@dynamic headers;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
@synthesize bodysArray;
@dynamic bodys;
- (instancetype) init {
  if ((self = [super init])) {
    self.value = @"";
  }
  return self;
}
static MessageBody* defaultMessageBodyInstance = nil;
+ (void) initialize {
  if (self == [MessageBody class]) {
    defaultMessageBodyInstance = [[MessageBody alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMessageBodyInstance;
}
- (instancetype) defaultInstance {
  return defaultMessageBodyInstance;
}
- (NSArray<StringHeader*> *)headers {
  return headersArray;
}
- (StringHeader*)headersAtIndex:(NSUInteger)index {
  return [headersArray objectAtIndex:index];
}
- (NSArray<MessageBody*> *)bodys {
  return bodysArray;
}
- (MessageBody*)bodysAtIndex:(NSUInteger)index {
  return [bodysArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasValue) {
    size_ += computeStringSize(2, self.value);
  }
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MessageBody*) parseFromData:(NSData*) data {
  return (MessageBody*)[[[MessageBody builder] mergeFromData:data] build];
}
+ (MessageBody*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessageBody*)[[[MessageBody builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MessageBody*) parseFromInputStream:(NSInputStream*) input {
  return (MessageBody*)[[[MessageBody builder] mergeFromInputStream:input] build];
}
+ (MessageBody*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessageBody*)[[[MessageBody builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessageBody*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MessageBody*)[[[MessageBody builder] mergeFromCodedInputStream:input] build];
}
+ (MessageBody*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessageBody*)[[[MessageBody builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessageBodyBuilder*) builder {
  return [[MessageBodyBuilder alloc] init];
}
+ (MessageBodyBuilder*) builderWithPrototype:(MessageBody*) prototype {
  return [[MessageBody builder] mergeFrom:prototype];
}
- (MessageBodyBuilder*) builder {
  return [MessageBody builder];
}
- (MessageBodyBuilder*) toBuilder {
  return [MessageBody builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"headers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bodys"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (StringHeader* element in self.headersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"headers"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  for (MessageBody* element in self.bodysArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"bodys"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MessageBody class]]) {
    return NO;
  }
  MessageBody *otherMessage = other;
  return
      [self.headersArray isEqualToArray:otherMessage.headersArray] &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      [self.bodysArray isEqualToArray:otherMessage.bodysArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MessageBodyBuilder()
@property (strong) MessageBody* resultMessageBody;
@end

@implementation MessageBodyBuilder
@synthesize resultMessageBody;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMessageBody = [[MessageBody alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMessageBody;
}
- (MessageBodyBuilder*) clear {
  self.resultMessageBody = [[MessageBody alloc] init];
  return self;
}
- (MessageBodyBuilder*) clone {
  return [MessageBody builderWithPrototype:resultMessageBody];
}
- (MessageBody*) defaultInstance {
  return [MessageBody defaultInstance];
}
- (MessageBody*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MessageBody*) buildPartial {
  MessageBody* returnMe = resultMessageBody;
  self.resultMessageBody = nil;
  return returnMe;
}
- (MessageBodyBuilder*) mergeFrom:(MessageBody*) other {
  if (other == [MessageBody defaultInstance]) {
    return self;
  }
  if (other.headersArray.count > 0) {
    if (resultMessageBody.headersArray == nil) {
      resultMessageBody.headersArray = [[NSMutableArray alloc] initWithArray:other.headersArray];
    } else {
      [resultMessageBody.headersArray addObjectsFromArray:other.headersArray];
    }
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  if (other.bodysArray.count > 0) {
    if (resultMessageBody.bodysArray == nil) {
      resultMessageBody.bodysArray = [[NSMutableArray alloc] initWithArray:other.bodysArray];
    } else {
      [resultMessageBody.bodysArray addObjectsFromArray:other.bodysArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MessageBodyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MessageBodyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        StringHeaderBuilder* subBuilder = [StringHeader builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addHeaders:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
      case 26: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBodys:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray<StringHeader*> *)headers {
  return resultMessageBody.headersArray;
}
- (StringHeader*)headersAtIndex:(NSUInteger)index {
  return [resultMessageBody headersAtIndex:index];
}
- (MessageBodyBuilder *)addHeaders:(StringHeader*)value {
  if (resultMessageBody.headersArray == nil) {
    resultMessageBody.headersArray = [[NSMutableArray alloc]init];
  }
  [resultMessageBody.headersArray addObject:value];
  return self;
}
- (MessageBodyBuilder *)setHeadersArray:(NSArray<StringHeader*> *)array {
  resultMessageBody.headersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MessageBodyBuilder *)clearHeaders {
  resultMessageBody.headersArray = nil;
  return self;
}
- (BOOL) hasValue {
  return resultMessageBody.hasValue;
}
- (NSString*) value {
  return resultMessageBody.value;
}
- (MessageBodyBuilder*) setValue:(NSString*) value {
  resultMessageBody.hasValue = YES;
  resultMessageBody.value = value;
  return self;
}
- (MessageBodyBuilder*) clearValue {
  resultMessageBody.hasValue = NO;
  resultMessageBody.value = @"";
  return self;
}
- (NSMutableArray<MessageBody*> *)bodys {
  return resultMessageBody.bodysArray;
}
- (MessageBody*)bodysAtIndex:(NSUInteger)index {
  return [resultMessageBody bodysAtIndex:index];
}
- (MessageBodyBuilder *)addBodys:(MessageBody*)value {
  if (resultMessageBody.bodysArray == nil) {
    resultMessageBody.bodysArray = [[NSMutableArray alloc]init];
  }
  [resultMessageBody.bodysArray addObject:value];
  return self;
}
- (MessageBodyBuilder *)setBodysArray:(NSArray<MessageBody*> *)array {
  resultMessageBody.bodysArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MessageBodyBuilder *)clearBodys {
  resultMessageBody.bodysArray = nil;
  return self;
}
@end

@interface IQMessage ()
@property (strong) NSString* namespace;
@property (strong) NSString* key;
@property (strong) NSString* value;
@property (strong) NSString* messageId;
@property (strong) StringHeader* header;
@property (strong) MessageBody* body;
@property SInt64 receivedTime;
@property SInt64 transferTime;
@property (strong) NSMutableArray<StringHeader*> * headersArray;
@property (strong) NSMutableArray<MessageBody*> * bodysArray;
@property IQMessageKeyType definedKey;
@end

@implementation IQMessage

- (BOOL) hasNamespace {
  return !!hasNamespace_;
}
- (void) setHasNamespace:(BOOL) _value_ {
  hasNamespace_ = !!_value_;
}
@synthesize namespace;
- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) _value_ {
  hasMessageId_ = !!_value_;
}
@synthesize messageId;
- (BOOL) hasHeader {
  return !!hasHeader_;
}
- (void) setHasHeader:(BOOL) _value_ {
  hasHeader_ = !!_value_;
}
@synthesize header;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
- (BOOL) hasReceivedTime {
  return !!hasReceivedTime_;
}
- (void) setHasReceivedTime:(BOOL) _value_ {
  hasReceivedTime_ = !!_value_;
}
@synthesize receivedTime;
- (BOOL) hasTransferTime {
  return !!hasTransferTime_;
}
- (void) setHasTransferTime:(BOOL) _value_ {
  hasTransferTime_ = !!_value_;
}
@synthesize transferTime;
@synthesize headersArray;
@dynamic headers;
@synthesize bodysArray;
@dynamic bodys;
- (BOOL) hasDefinedKey {
  return !!hasDefinedKey_;
}
- (void) setHasDefinedKey:(BOOL) _value_ {
  hasDefinedKey_ = !!_value_;
}
@synthesize definedKey;
- (instancetype) init {
  if ((self = [super init])) {
    self.namespace = @"";
    self.key = @"";
    self.value = @"";
    self.messageId = @"";
    self.header = [StringHeader defaultInstance];
    self.body = [MessageBody defaultInstance];
    self.receivedTime = 0L;
    self.transferTime = 0L;
    self.definedKey = IQMessageKeyTypeIqkeyBind;
  }
  return self;
}
static IQMessage* defaultIQMessageInstance = nil;
+ (void) initialize {
  if (self == [IQMessage class]) {
    defaultIQMessageInstance = [[IQMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIQMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultIQMessageInstance;
}
- (NSArray<StringHeader*> *)headers {
  return headersArray;
}
- (StringHeader*)headersAtIndex:(NSUInteger)index {
  return [headersArray objectAtIndex:index];
}
- (NSArray<MessageBody*> *)bodys {
  return bodysArray;
}
- (MessageBody*)bodysAtIndex:(NSUInteger)index {
  return [bodysArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNamespace) {
    [output writeString:1 value:self.namespace];
  }
  if (self.hasKey) {
    [output writeString:2 value:self.key];
  }
  if (self.hasValue) {
    [output writeString:3 value:self.value];
  }
  if (self.hasMessageId) {
    [output writeString:4 value:self.messageId];
  }
  if (self.hasHeader) {
    [output writeMessage:5 value:self.header];
  }
  if (self.hasBody) {
    [output writeMessage:6 value:self.body];
  }
  if (self.hasReceivedTime) {
    [output writeInt64:7 value:self.receivedTime];
  }
  if (self.hasTransferTime) {
    [output writeInt64:8 value:self.transferTime];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  if (self.hasDefinedKey) {
    [output writeEnum:11 value:self.definedKey];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNamespace) {
    size_ += computeStringSize(1, self.namespace);
  }
  if (self.hasKey) {
    size_ += computeStringSize(2, self.key);
  }
  if (self.hasValue) {
    size_ += computeStringSize(3, self.value);
  }
  if (self.hasMessageId) {
    size_ += computeStringSize(4, self.messageId);
  }
  if (self.hasHeader) {
    size_ += computeMessageSize(5, self.header);
  }
  if (self.hasBody) {
    size_ += computeMessageSize(6, self.body);
  }
  if (self.hasReceivedTime) {
    size_ += computeInt64Size(7, self.receivedTime);
  }
  if (self.hasTransferTime) {
    size_ += computeInt64Size(8, self.transferTime);
  }
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  if (self.hasDefinedKey) {
    size_ += computeEnumSize(11, self.definedKey);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IQMessage*) parseFromData:(NSData*) data {
  return (IQMessage*)[[[IQMessage builder] mergeFromData:data] build];
}
+ (IQMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IQMessage*)[[[IQMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IQMessage*) parseFromInputStream:(NSInputStream*) input {
  return (IQMessage*)[[[IQMessage builder] mergeFromInputStream:input] build];
}
+ (IQMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IQMessage*)[[[IQMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IQMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IQMessage*)[[[IQMessage builder] mergeFromCodedInputStream:input] build];
}
+ (IQMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IQMessage*)[[[IQMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IQMessageBuilder*) builder {
  return [[IQMessageBuilder alloc] init];
}
+ (IQMessageBuilder*) builderWithPrototype:(IQMessage*) prototype {
  return [[IQMessage builder] mergeFrom:prototype];
}
- (IQMessageBuilder*) builder {
  return [IQMessage builder];
}
- (IQMessageBuilder*) toBuilder {
  return [IQMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNamespace) {
    [output appendFormat:@"%@%@: %@\n", indent, @"namespace", self.namespace];
  }
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  if (self.hasMessageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageId", self.messageId];
  }
  if (self.hasHeader) {
    [output appendFormat:@"%@%@ {\n", indent, @"header"];
    [self.header writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@ {\n", indent, @"body"];
    [self.body writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasReceivedTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"receivedTime", [NSNumber numberWithLongLong:self.receivedTime]];
  }
  if (self.hasTransferTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transferTime", [NSNumber numberWithLongLong:self.transferTime]];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"headers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bodys"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDefinedKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"definedKey", NSStringFromIQMessageKeyType(self.definedKey)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNamespace) {
    [dictionary setObject: self.namespace forKey: @"namespace"];
  }
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  if (self.hasMessageId) {
    [dictionary setObject: self.messageId forKey: @"messageId"];
  }
  if (self.hasHeader) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.header storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"header"];
  }
  if (self.hasBody) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.body storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"body"];
  }
  if (self.hasReceivedTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.receivedTime] forKey: @"receivedTime"];
  }
  if (self.hasTransferTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.transferTime] forKey: @"transferTime"];
  }
  for (StringHeader* element in self.headersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"headers"];
  }
  for (MessageBody* element in self.bodysArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"bodys"];
  }
  if (self.hasDefinedKey) {
    [dictionary setObject: @(self.definedKey) forKey: @"definedKey"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IQMessage class]]) {
    return NO;
  }
  IQMessage *otherMessage = other;
  return
      self.hasNamespace == otherMessage.hasNamespace &&
      (!self.hasNamespace || [self.namespace isEqual:otherMessage.namespace]) &&
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      self.hasMessageId == otherMessage.hasMessageId &&
      (!self.hasMessageId || [self.messageId isEqual:otherMessage.messageId]) &&
      self.hasHeader == otherMessage.hasHeader &&
      (!self.hasHeader || [self.header isEqual:otherMessage.header]) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      self.hasReceivedTime == otherMessage.hasReceivedTime &&
      (!self.hasReceivedTime || self.receivedTime == otherMessage.receivedTime) &&
      self.hasTransferTime == otherMessage.hasTransferTime &&
      (!self.hasTransferTime || self.transferTime == otherMessage.transferTime) &&
      [self.headersArray isEqualToArray:otherMessage.headersArray] &&
      [self.bodysArray isEqualToArray:otherMessage.bodysArray] &&
      self.hasDefinedKey == otherMessage.hasDefinedKey &&
      (!self.hasDefinedKey || self.definedKey == otherMessage.definedKey) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNamespace) {
    hashCode = hashCode * 31 + [self.namespace hash];
  }
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  if (self.hasMessageId) {
    hashCode = hashCode * 31 + [self.messageId hash];
  }
  if (self.hasHeader) {
    hashCode = hashCode * 31 + [self.header hash];
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  if (self.hasReceivedTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.receivedTime] hash];
  }
  if (self.hasTransferTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.transferTime] hash];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDefinedKey) {
    hashCode = hashCode * 31 + self.definedKey;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IQMessageBuilder()
@property (strong) IQMessage* resultIqmessage;
@end

@implementation IQMessageBuilder
@synthesize resultIqmessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultIqmessage = [[IQMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultIqmessage;
}
- (IQMessageBuilder*) clear {
  self.resultIqmessage = [[IQMessage alloc] init];
  return self;
}
- (IQMessageBuilder*) clone {
  return [IQMessage builderWithPrototype:resultIqmessage];
}
- (IQMessage*) defaultInstance {
  return [IQMessage defaultInstance];
}
- (IQMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IQMessage*) buildPartial {
  IQMessage* returnMe = resultIqmessage;
  self.resultIqmessage = nil;
  return returnMe;
}
- (IQMessageBuilder*) mergeFrom:(IQMessage*) other {
  if (other == [IQMessage defaultInstance]) {
    return self;
  }
  if (other.hasNamespace) {
    [self setNamespace:other.namespace];
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasHeader) {
    [self mergeHeader:other.header];
  }
  if (other.hasBody) {
    [self mergeBody:other.body];
  }
  if (other.hasReceivedTime) {
    [self setReceivedTime:other.receivedTime];
  }
  if (other.hasTransferTime) {
    [self setTransferTime:other.transferTime];
  }
  if (other.headersArray.count > 0) {
    if (resultIqmessage.headersArray == nil) {
      resultIqmessage.headersArray = [[NSMutableArray alloc] initWithArray:other.headersArray];
    } else {
      [resultIqmessage.headersArray addObjectsFromArray:other.headersArray];
    }
  }
  if (other.bodysArray.count > 0) {
    if (resultIqmessage.bodysArray == nil) {
      resultIqmessage.bodysArray = [[NSMutableArray alloc] initWithArray:other.bodysArray];
    } else {
      [resultIqmessage.bodysArray addObjectsFromArray:other.bodysArray];
    }
  }
  if (other.hasDefinedKey) {
    [self setDefinedKey:other.definedKey];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IQMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IQMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setNamespace:[input readString]];
        break;
      }
      case 18: {
        [self setKey:[input readString]];
        break;
      }
      case 26: {
        [self setValue:[input readString]];
        break;
      }
      case 34: {
        [self setMessageId:[input readString]];
        break;
      }
      case 42: {
        StringHeaderBuilder* subBuilder = [StringHeader builder];
        if (self.hasHeader) {
          [subBuilder mergeFrom:self.header];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHeader:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        if (self.hasBody) {
          [subBuilder mergeFrom:self.body];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBody:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setReceivedTime:[input readInt64]];
        break;
      }
      case 64: {
        [self setTransferTime:[input readInt64]];
        break;
      }
      case 74: {
        StringHeaderBuilder* subBuilder = [StringHeader builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addHeaders:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBodys:[subBuilder buildPartial]];
        break;
      }
      case 88: {
        IQMessageKeyType value = (IQMessageKeyType)[input readEnum];
        if (IQMessageKeyTypeIsValidValue(value)) {
          [self setDefinedKey:value];
        } else {
          [unknownFields mergeVarintField:11 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasNamespace {
  return resultIqmessage.hasNamespace;
}
- (NSString*) namespace {
  return resultIqmessage.namespace;
}
- (IQMessageBuilder*) setNamespace:(NSString*) value {
  resultIqmessage.hasNamespace = YES;
  resultIqmessage.namespace = value;
  return self;
}
- (IQMessageBuilder*) clearNamespace {
  resultIqmessage.hasNamespace = NO;
  resultIqmessage.namespace = @"";
  return self;
}
- (BOOL) hasKey {
  return resultIqmessage.hasKey;
}
- (NSString*) key {
  return resultIqmessage.key;
}
- (IQMessageBuilder*) setKey:(NSString*) value {
    if ([self updateDefineKeyForKey:value] == NO) {
        resultIqmessage.hasKey = YES;
        resultIqmessage.key = value;
    }
  return self;
}
- (IQMessageBuilder*) clearKey {
  resultIqmessage.hasKey = NO;
  resultIqmessage.key = @"";
  return self;
}
- (BOOL) hasValue {
  return resultIqmessage.hasValue;
}
- (NSString*) value {
  return resultIqmessage.value;
}
- (IQMessageBuilder*) setValue:(NSString*) value {
  resultIqmessage.hasValue = YES;
  resultIqmessage.value = value;
  return self;
}
- (IQMessageBuilder*) clearValue {
  resultIqmessage.hasValue = NO;
  resultIqmessage.value = @"";
  return self;
}
- (BOOL) hasMessageId {
  return resultIqmessage.hasMessageId;
}
- (NSString*) messageId {
  return resultIqmessage.messageId;
}
- (IQMessageBuilder*) setMessageId:(NSString*) value {
  resultIqmessage.hasMessageId = YES;
  resultIqmessage.messageId = value;
  return self;
}
- (IQMessageBuilder*) clearMessageId {
  resultIqmessage.hasMessageId = NO;
  resultIqmessage.messageId = @"";
  return self;
}
- (BOOL) hasHeader {
  return resultIqmessage.hasHeader;
}
- (StringHeader*) header {
  return resultIqmessage.header;
}
- (IQMessageBuilder*) setHeader:(StringHeader*) value {
  resultIqmessage.hasHeader = YES;
  resultIqmessage.header = value;
  return self;
}
- (IQMessageBuilder*) setHeaderBuilder:(StringHeaderBuilder*) builderForValue {
  return [self setHeader:[builderForValue build]];
}
- (IQMessageBuilder*) mergeHeader:(StringHeader*) value {
  if (resultIqmessage.hasHeader &&
      resultIqmessage.header != [StringHeader defaultInstance]) {
    resultIqmessage.header =
      [[[StringHeader builderWithPrototype:resultIqmessage.header] mergeFrom:value] buildPartial];
  } else {
    resultIqmessage.header = value;
  }
  resultIqmessage.hasHeader = YES;
  return self;
}
- (IQMessageBuilder*) clearHeader {
  resultIqmessage.hasHeader = NO;
  resultIqmessage.header = [StringHeader defaultInstance];
  return self;
}
- (BOOL) hasBody {
  return resultIqmessage.hasBody;
}
- (MessageBody*) body {
  return resultIqmessage.body;
}
- (IQMessageBuilder*) setBody:(MessageBody*) value {
  resultIqmessage.hasBody = YES;
  resultIqmessage.body = value;
  return self;
}
- (IQMessageBuilder*) setBodyBuilder:(MessageBodyBuilder*) builderForValue {
  return [self setBody:[builderForValue build]];
}
- (IQMessageBuilder*) mergeBody:(MessageBody*) value {
  if (resultIqmessage.hasBody &&
      resultIqmessage.body != [MessageBody defaultInstance]) {
    resultIqmessage.body =
      [[[MessageBody builderWithPrototype:resultIqmessage.body] mergeFrom:value] buildPartial];
  } else {
    resultIqmessage.body = value;
  }
  resultIqmessage.hasBody = YES;
  return self;
}
- (IQMessageBuilder*) clearBody {
  resultIqmessage.hasBody = NO;
  resultIqmessage.body = [MessageBody defaultInstance];
  return self;
}
- (BOOL) hasReceivedTime {
  return resultIqmessage.hasReceivedTime;
}
- (SInt64) receivedTime {
  return resultIqmessage.receivedTime;
}
- (IQMessageBuilder*) setReceivedTime:(SInt64) value {
  resultIqmessage.hasReceivedTime = YES;
  resultIqmessage.receivedTime = value;
  return self;
}
- (IQMessageBuilder*) clearReceivedTime {
  resultIqmessage.hasReceivedTime = NO;
  resultIqmessage.receivedTime = 0L;
  return self;
}
- (BOOL) hasTransferTime {
  return resultIqmessage.hasTransferTime;
}
- (SInt64) transferTime {
  return resultIqmessage.transferTime;
}
- (IQMessageBuilder*) setTransferTime:(SInt64) value {
  resultIqmessage.hasTransferTime = YES;
  resultIqmessage.transferTime = value;
  return self;
}
- (IQMessageBuilder*) clearTransferTime {
  resultIqmessage.hasTransferTime = NO;
  resultIqmessage.transferTime = 0L;
  return self;
}
- (NSMutableArray<StringHeader*> *)headers {
  return resultIqmessage.headersArray;
}
- (StringHeader*)headersAtIndex:(NSUInteger)index {
  return [resultIqmessage headersAtIndex:index];
}
- (IQMessageBuilder *)addHeaders:(StringHeader*)value {
  if (resultIqmessage.headersArray == nil) {
    resultIqmessage.headersArray = [[NSMutableArray alloc]init];
  }
  [resultIqmessage.headersArray addObject:value];
  return self;
}
- (IQMessageBuilder *)setHeadersArray:(NSArray<StringHeader*> *)array {
  resultIqmessage.headersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IQMessageBuilder *)clearHeaders {
  resultIqmessage.headersArray = nil;
  return self;
}
- (NSMutableArray<MessageBody*> *)bodys {
  return resultIqmessage.bodysArray;
}
- (MessageBody*)bodysAtIndex:(NSUInteger)index {
  return [resultIqmessage bodysAtIndex:index];
}
- (IQMessageBuilder *)addBodys:(MessageBody*)value {
  if (resultIqmessage.bodysArray == nil) {
    resultIqmessage.bodysArray = [[NSMutableArray alloc]init];
  }
  [resultIqmessage.bodysArray addObject:value];
  return self;
}
- (IQMessageBuilder *)setBodysArray:(NSArray<MessageBody*> *)array {
  resultIqmessage.bodysArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IQMessageBuilder *)clearBodys {
  resultIqmessage.bodysArray = nil;
  return self;
}
- (BOOL) hasDefinedKey {
  return resultIqmessage.hasDefinedKey;
}
- (IQMessageKeyType) definedKey {
  return resultIqmessage.definedKey;
}
- (IQMessageBuilder*) setDefinedKey:(IQMessageKeyType) value {
  resultIqmessage.hasDefinedKey = YES;
  resultIqmessage.definedKey = value;
  return self;
}
- (IQMessageBuilder*) clearDefinedKey {
  resultIqmessage.hasDefinedKey = NO;
  resultIqmessage.definedKey = IQMessageKeyTypeIqkeyBind;
  return self;
}
@end

@interface PresenceMessage ()
@property (strong) NSString* namespace;
@property (strong) NSString* key;
@property (strong) NSString* value;
@property (strong) NSString* messageId;
@property (strong) StringHeader* header;
@property (strong) MessageBody* body;
@property SInt64 receivedTime;
@property SInt64 transferTime;
@property (strong) NSMutableArray<StringHeader*> * headersArray;
@property (strong) NSMutableArray<MessageBody*> * bodysArray;
@property PresenceKeyType definedKey;
@property SInt32 categoryType;
@end

@implementation PresenceMessage

- (BOOL) hasNamespace {
  return !!hasNamespace_;
}
- (void) setHasNamespace:(BOOL) _value_ {
  hasNamespace_ = !!_value_;
}
@synthesize namespace;
- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) _value_ {
  hasMessageId_ = !!_value_;
}
@synthesize messageId;
- (BOOL) hasHeader {
  return !!hasHeader_;
}
- (void) setHasHeader:(BOOL) _value_ {
  hasHeader_ = !!_value_;
}
@synthesize header;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
- (BOOL) hasReceivedTime {
  return !!hasReceivedTime_;
}
- (void) setHasReceivedTime:(BOOL) _value_ {
  hasReceivedTime_ = !!_value_;
}
@synthesize receivedTime;
- (BOOL) hasTransferTime {
  return !!hasTransferTime_;
}
- (void) setHasTransferTime:(BOOL) _value_ {
  hasTransferTime_ = !!_value_;
}
@synthesize transferTime;
@synthesize headersArray;
@dynamic headers;
@synthesize bodysArray;
@dynamic bodys;
- (BOOL) hasDefinedKey {
  return !!hasDefinedKey_;
}
- (void) setHasDefinedKey:(BOOL) _value_ {
  hasDefinedKey_ = !!_value_;
}
@synthesize definedKey;
- (BOOL) hasCategoryType {
  return !!hasCategoryType_;
}
- (void) setHasCategoryType:(BOOL) _value_ {
  hasCategoryType_ = !!_value_;
}
@synthesize categoryType;
- (instancetype) init {
  if ((self = [super init])) {
    self.namespace = @"";
    self.key = @"";
    self.value = @"";
    self.messageId = @"";
    self.header = [StringHeader defaultInstance];
    self.body = [MessageBody defaultInstance];
    self.receivedTime = 0L;
    self.transferTime = 0L;
    self.definedKey = PresenceKeyTypePresenceKeyPriority;
    self.categoryType = 0;
  }
  return self;
}
static PresenceMessage* defaultPresenceMessageInstance = nil;
+ (void) initialize {
  if (self == [PresenceMessage class]) {
    defaultPresenceMessageInstance = [[PresenceMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPresenceMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultPresenceMessageInstance;
}
- (NSArray<StringHeader*> *)headers {
  return headersArray;
}
- (StringHeader*)headersAtIndex:(NSUInteger)index {
  return [headersArray objectAtIndex:index];
}
- (NSArray<MessageBody*> *)bodys {
  return bodysArray;
}
- (MessageBody*)bodysAtIndex:(NSUInteger)index {
  return [bodysArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNamespace) {
    [output writeString:1 value:self.namespace];
  }
  if (self.hasKey) {
    [output writeString:2 value:self.key];
  }
  if (self.hasValue) {
    [output writeString:3 value:self.value];
  }
  if (self.hasMessageId) {
    [output writeString:4 value:self.messageId];
  }
  if (self.hasHeader) {
    [output writeMessage:5 value:self.header];
  }
  if (self.hasBody) {
    [output writeMessage:6 value:self.body];
  }
  if (self.hasReceivedTime) {
    [output writeInt64:7 value:self.receivedTime];
  }
  if (self.hasTransferTime) {
    [output writeInt64:8 value:self.transferTime];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  if (self.hasDefinedKey) {
    [output writeEnum:11 value:self.definedKey];
  }
  if (self.hasCategoryType) {
    [output writeInt32:12 value:self.categoryType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNamespace) {
    size_ += computeStringSize(1, self.namespace);
  }
  if (self.hasKey) {
    size_ += computeStringSize(2, self.key);
  }
  if (self.hasValue) {
    size_ += computeStringSize(3, self.value);
  }
  if (self.hasMessageId) {
    size_ += computeStringSize(4, self.messageId);
  }
  if (self.hasHeader) {
    size_ += computeMessageSize(5, self.header);
  }
  if (self.hasBody) {
    size_ += computeMessageSize(6, self.body);
  }
  if (self.hasReceivedTime) {
    size_ += computeInt64Size(7, self.receivedTime);
  }
  if (self.hasTransferTime) {
    size_ += computeInt64Size(8, self.transferTime);
  }
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  if (self.hasDefinedKey) {
    size_ += computeEnumSize(11, self.definedKey);
  }
  if (self.hasCategoryType) {
    size_ += computeInt32Size(12, self.categoryType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PresenceMessage*) parseFromData:(NSData*) data {
  return (PresenceMessage*)[[[PresenceMessage builder] mergeFromData:data] build];
}
+ (PresenceMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PresenceMessage*)[[[PresenceMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PresenceMessage*) parseFromInputStream:(NSInputStream*) input {
  return (PresenceMessage*)[[[PresenceMessage builder] mergeFromInputStream:input] build];
}
+ (PresenceMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PresenceMessage*)[[[PresenceMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PresenceMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PresenceMessage*)[[[PresenceMessage builder] mergeFromCodedInputStream:input] build];
}
+ (PresenceMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PresenceMessage*)[[[PresenceMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PresenceMessageBuilder*) builder {
  return [[PresenceMessageBuilder alloc] init];
}
+ (PresenceMessageBuilder*) builderWithPrototype:(PresenceMessage*) prototype {
  return [[PresenceMessage builder] mergeFrom:prototype];
}
- (PresenceMessageBuilder*) builder {
  return [PresenceMessage builder];
}
- (PresenceMessageBuilder*) toBuilder {
  return [PresenceMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNamespace) {
    [output appendFormat:@"%@%@: %@\n", indent, @"namespace", self.namespace];
  }
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  if (self.hasMessageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageId", self.messageId];
  }
  if (self.hasHeader) {
    [output appendFormat:@"%@%@ {\n", indent, @"header"];
    [self.header writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@ {\n", indent, @"body"];
    [self.body writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasReceivedTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"receivedTime", [NSNumber numberWithLongLong:self.receivedTime]];
  }
  if (self.hasTransferTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transferTime", [NSNumber numberWithLongLong:self.transferTime]];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"headers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bodys"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDefinedKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"definedKey", NSStringFromPresenceKeyType(self.definedKey)];
  }
  if (self.hasCategoryType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryType", [NSNumber numberWithInteger:self.categoryType]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNamespace) {
    [dictionary setObject: self.namespace forKey: @"namespace"];
  }
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  if (self.hasMessageId) {
    [dictionary setObject: self.messageId forKey: @"messageId"];
  }
  if (self.hasHeader) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.header storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"header"];
  }
  if (self.hasBody) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.body storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"body"];
  }
  if (self.hasReceivedTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.receivedTime] forKey: @"receivedTime"];
  }
  if (self.hasTransferTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.transferTime] forKey: @"transferTime"];
  }
  for (StringHeader* element in self.headersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"headers"];
  }
  for (MessageBody* element in self.bodysArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"bodys"];
  }
  if (self.hasDefinedKey) {
    [dictionary setObject: @(self.definedKey) forKey: @"definedKey"];
  }
  if (self.hasCategoryType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.categoryType] forKey: @"categoryType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PresenceMessage class]]) {
    return NO;
  }
  PresenceMessage *otherMessage = other;
  return
      self.hasNamespace == otherMessage.hasNamespace &&
      (!self.hasNamespace || [self.namespace isEqual:otherMessage.namespace]) &&
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      self.hasMessageId == otherMessage.hasMessageId &&
      (!self.hasMessageId || [self.messageId isEqual:otherMessage.messageId]) &&
      self.hasHeader == otherMessage.hasHeader &&
      (!self.hasHeader || [self.header isEqual:otherMessage.header]) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      self.hasReceivedTime == otherMessage.hasReceivedTime &&
      (!self.hasReceivedTime || self.receivedTime == otherMessage.receivedTime) &&
      self.hasTransferTime == otherMessage.hasTransferTime &&
      (!self.hasTransferTime || self.transferTime == otherMessage.transferTime) &&
      [self.headersArray isEqualToArray:otherMessage.headersArray] &&
      [self.bodysArray isEqualToArray:otherMessage.bodysArray] &&
      self.hasDefinedKey == otherMessage.hasDefinedKey &&
      (!self.hasDefinedKey || self.definedKey == otherMessage.definedKey) &&
      self.hasCategoryType == otherMessage.hasCategoryType &&
      (!self.hasCategoryType || self.categoryType == otherMessage.categoryType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNamespace) {
    hashCode = hashCode * 31 + [self.namespace hash];
  }
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  if (self.hasMessageId) {
    hashCode = hashCode * 31 + [self.messageId hash];
  }
  if (self.hasHeader) {
    hashCode = hashCode * 31 + [self.header hash];
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  if (self.hasReceivedTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.receivedTime] hash];
  }
  if (self.hasTransferTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.transferTime] hash];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDefinedKey) {
    hashCode = hashCode * 31 + self.definedKey;
  }
  if (self.hasCategoryType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.categoryType] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PresenceMessageBuilder()
@property (strong) PresenceMessage* resultPresenceMessage;
@end

@implementation PresenceMessageBuilder
@synthesize resultPresenceMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPresenceMessage = [[PresenceMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPresenceMessage;
}
- (PresenceMessageBuilder*) clear {
  self.resultPresenceMessage = [[PresenceMessage alloc] init];
  return self;
}
- (PresenceMessageBuilder*) clone {
  return [PresenceMessage builderWithPrototype:resultPresenceMessage];
}
- (PresenceMessage*) defaultInstance {
  return [PresenceMessage defaultInstance];
}
- (PresenceMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PresenceMessage*) buildPartial {
  PresenceMessage* returnMe = resultPresenceMessage;
  self.resultPresenceMessage = nil;
  return returnMe;
}
- (PresenceMessageBuilder*) mergeFrom:(PresenceMessage*) other {
  if (other == [PresenceMessage defaultInstance]) {
    return self;
  }
  if (other.hasNamespace) {
    [self setNamespace:other.namespace];
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasHeader) {
    [self mergeHeader:other.header];
  }
  if (other.hasBody) {
    [self mergeBody:other.body];
  }
  if (other.hasReceivedTime) {
    [self setReceivedTime:other.receivedTime];
  }
  if (other.hasTransferTime) {
    [self setTransferTime:other.transferTime];
  }
  if (other.headersArray.count > 0) {
    if (resultPresenceMessage.headersArray == nil) {
      resultPresenceMessage.headersArray = [[NSMutableArray alloc] initWithArray:other.headersArray];
    } else {
      [resultPresenceMessage.headersArray addObjectsFromArray:other.headersArray];
    }
  }
  if (other.bodysArray.count > 0) {
    if (resultPresenceMessage.bodysArray == nil) {
      resultPresenceMessage.bodysArray = [[NSMutableArray alloc] initWithArray:other.bodysArray];
    } else {
      [resultPresenceMessage.bodysArray addObjectsFromArray:other.bodysArray];
    }
  }
  if (other.hasDefinedKey) {
    [self setDefinedKey:other.definedKey];
  }
  if (other.hasCategoryType) {
    [self setCategoryType:other.categoryType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PresenceMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PresenceMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setNamespace:[input readString]];
        break;
      }
      case 18: {
        [self setKey:[input readString]];
        break;
      }
      case 26: {
        [self setValue:[input readString]];
        break;
      }
      case 34: {
        [self setMessageId:[input readString]];
        break;
      }
      case 42: {
        StringHeaderBuilder* subBuilder = [StringHeader builder];
        if (self.hasHeader) {
          [subBuilder mergeFrom:self.header];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHeader:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        if (self.hasBody) {
          [subBuilder mergeFrom:self.body];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBody:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setReceivedTime:[input readInt64]];
        break;
      }
      case 64: {
        [self setTransferTime:[input readInt64]];
        break;
      }
      case 74: {
        StringHeaderBuilder* subBuilder = [StringHeader builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addHeaders:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBodys:[subBuilder buildPartial]];
        break;
      }
      case 88: {
        PresenceKeyType value = (PresenceKeyType)[input readEnum];
        if (PresenceKeyTypeIsValidValue(value)) {
          [self setDefinedKey:value];
        } else {
          [unknownFields mergeVarintField:11 value:value];
        }
        break;
      }
      case 96: {
        [self setCategoryType:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasNamespace {
  return resultPresenceMessage.hasNamespace;
}
- (NSString*) namespace {
  return resultPresenceMessage.namespace;
}
- (PresenceMessageBuilder*) setNamespace:(NSString*) value {
  resultPresenceMessage.hasNamespace = YES;
  resultPresenceMessage.namespace = value;
  return self;
}
- (PresenceMessageBuilder*) clearNamespace {
  resultPresenceMessage.hasNamespace = NO;
  resultPresenceMessage.namespace = @"";
  return self;
}
- (BOOL) hasKey {
  return resultPresenceMessage.hasKey;
}
- (NSString*) key {
  return resultPresenceMessage.key;
}
- (PresenceMessageBuilder*) setKey:(NSString*) value {
    if ([self updateDefineKeyForKey:value] == NO) {
      resultPresenceMessage.hasKey = YES;
      resultPresenceMessage.key = value;
    }
  return self;
}
- (PresenceMessageBuilder*) clearKey {
  resultPresenceMessage.hasKey = NO;
  resultPresenceMessage.key = @"";
  return self;
}
- (BOOL) hasValue {
  return resultPresenceMessage.hasValue;
}
- (NSString*) value {
  return resultPresenceMessage.value;
}
- (PresenceMessageBuilder*) setValue:(NSString*) value {
  resultPresenceMessage.hasValue = YES;
  resultPresenceMessage.value = value;
  return self;
}
- (PresenceMessageBuilder*) clearValue {
  resultPresenceMessage.hasValue = NO;
  resultPresenceMessage.value = @"";
  return self;
}
- (BOOL) hasMessageId {
  return resultPresenceMessage.hasMessageId;
}
- (NSString*) messageId {
  return resultPresenceMessage.messageId;
}
- (PresenceMessageBuilder*) setMessageId:(NSString*) value {
  resultPresenceMessage.hasMessageId = YES;
  resultPresenceMessage.messageId = value;
  return self;
}
- (PresenceMessageBuilder*) clearMessageId {
  resultPresenceMessage.hasMessageId = NO;
  resultPresenceMessage.messageId = @"";
  return self;
}
- (BOOL) hasHeader {
  return resultPresenceMessage.hasHeader;
}
- (StringHeader*) header {
  return resultPresenceMessage.header;
}
- (PresenceMessageBuilder*) setHeader:(StringHeader*) value {
  resultPresenceMessage.hasHeader = YES;
  resultPresenceMessage.header = value;
  return self;
}
- (PresenceMessageBuilder*) setHeaderBuilder:(StringHeaderBuilder*) builderForValue {
  return [self setHeader:[builderForValue build]];
}
- (PresenceMessageBuilder*) mergeHeader:(StringHeader*) value {
  if (resultPresenceMessage.hasHeader &&
      resultPresenceMessage.header != [StringHeader defaultInstance]) {
    resultPresenceMessage.header =
      [[[StringHeader builderWithPrototype:resultPresenceMessage.header] mergeFrom:value] buildPartial];
  } else {
    resultPresenceMessage.header = value;
  }
  resultPresenceMessage.hasHeader = YES;
  return self;
}
- (PresenceMessageBuilder*) clearHeader {
  resultPresenceMessage.hasHeader = NO;
  resultPresenceMessage.header = [StringHeader defaultInstance];
  return self;
}
- (BOOL) hasBody {
  return resultPresenceMessage.hasBody;
}
- (MessageBody*) body {
  return resultPresenceMessage.body;
}
- (PresenceMessageBuilder*) setBody:(MessageBody*) value {
  resultPresenceMessage.hasBody = YES;
  resultPresenceMessage.body = value;
  return self;
}
- (PresenceMessageBuilder*) setBodyBuilder:(MessageBodyBuilder*) builderForValue {
  return [self setBody:[builderForValue build]];
}
- (PresenceMessageBuilder*) mergeBody:(MessageBody*) value {
  if (resultPresenceMessage.hasBody &&
      resultPresenceMessage.body != [MessageBody defaultInstance]) {
    resultPresenceMessage.body =
      [[[MessageBody builderWithPrototype:resultPresenceMessage.body] mergeFrom:value] buildPartial];
  } else {
    resultPresenceMessage.body = value;
  }
  resultPresenceMessage.hasBody = YES;
  return self;
}
- (PresenceMessageBuilder*) clearBody {
  resultPresenceMessage.hasBody = NO;
  resultPresenceMessage.body = [MessageBody defaultInstance];
  return self;
}
- (BOOL) hasReceivedTime {
  return resultPresenceMessage.hasReceivedTime;
}
- (SInt64) receivedTime {
  return resultPresenceMessage.receivedTime;
}
- (PresenceMessageBuilder*) setReceivedTime:(SInt64) value {
  resultPresenceMessage.hasReceivedTime = YES;
  resultPresenceMessage.receivedTime = value;
  return self;
}
- (PresenceMessageBuilder*) clearReceivedTime {
  resultPresenceMessage.hasReceivedTime = NO;
  resultPresenceMessage.receivedTime = 0L;
  return self;
}
- (BOOL) hasTransferTime {
  return resultPresenceMessage.hasTransferTime;
}
- (SInt64) transferTime {
  return resultPresenceMessage.transferTime;
}
- (PresenceMessageBuilder*) setTransferTime:(SInt64) value {
  resultPresenceMessage.hasTransferTime = YES;
  resultPresenceMessage.transferTime = value;
  return self;
}
- (PresenceMessageBuilder*) clearTransferTime {
  resultPresenceMessage.hasTransferTime = NO;
  resultPresenceMessage.transferTime = 0L;
  return self;
}
- (NSMutableArray<StringHeader*> *)headers {
  return resultPresenceMessage.headersArray;
}
- (StringHeader*)headersAtIndex:(NSUInteger)index {
  return [resultPresenceMessage headersAtIndex:index];
}
- (PresenceMessageBuilder *)addHeaders:(StringHeader*)value {
  if (resultPresenceMessage.headersArray == nil) {
    resultPresenceMessage.headersArray = [[NSMutableArray alloc]init];
  }
  [resultPresenceMessage.headersArray addObject:value];
  return self;
}
- (PresenceMessageBuilder *)setHeadersArray:(NSArray<StringHeader*> *)array {
  resultPresenceMessage.headersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PresenceMessageBuilder *)clearHeaders {
  resultPresenceMessage.headersArray = nil;
  return self;
}
- (NSMutableArray<MessageBody*> *)bodys {
  return resultPresenceMessage.bodysArray;
}
- (MessageBody*)bodysAtIndex:(NSUInteger)index {
  return [resultPresenceMessage bodysAtIndex:index];
}
- (PresenceMessageBuilder *)addBodys:(MessageBody*)value {
  if (resultPresenceMessage.bodysArray == nil) {
    resultPresenceMessage.bodysArray = [[NSMutableArray alloc]init];
  }
  [resultPresenceMessage.bodysArray addObject:value];
  return self;
}
- (PresenceMessageBuilder *)setBodysArray:(NSArray<MessageBody*> *)array {
  resultPresenceMessage.bodysArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PresenceMessageBuilder *)clearBodys {
  resultPresenceMessage.bodysArray = nil;
  return self;
}
- (BOOL) hasDefinedKey {
  return resultPresenceMessage.hasDefinedKey;
}
- (PresenceKeyType) definedKey {
  return resultPresenceMessage.definedKey;
}
- (PresenceMessageBuilder*) setDefinedKey:(PresenceKeyType) value {
  resultPresenceMessage.hasDefinedKey = YES;
  resultPresenceMessage.definedKey = value;
  return self;
}
- (PresenceMessageBuilder*) clearDefinedKey {
  resultPresenceMessage.hasDefinedKey = NO;
  resultPresenceMessage.definedKey = PresenceKeyTypePresenceKeyPriority;
  return self;
}
- (BOOL) hasCategoryType {
  return resultPresenceMessage.hasCategoryType;
}
- (SInt32) categoryType {
  return resultPresenceMessage.categoryType;
}
- (PresenceMessageBuilder*) setCategoryType:(SInt32) value {
  resultPresenceMessage.hasCategoryType = YES;
  resultPresenceMessage.categoryType = value;
  return self;
}
- (PresenceMessageBuilder*) clearCategoryType {
  resultPresenceMessage.hasCategoryType = NO;
  resultPresenceMessage.categoryType = 0;
  return self;
}
@end

@interface XmppMessage ()
@property SInt32 messageType;
@property SInt32 clientType;
@property SInt64 clientVersion;
@property (strong) NSString* namespace;
@property (strong) NSString* key;
@property (strong) NSString* value;
@property (strong) NSString* messageId;
@property (strong) StringHeader* header;
@property (strong) MessageBody* body;
@property SInt64 receivedTime;
@property SInt64 transferTime;
@property (strong) NSMutableArray<StringHeader*> * headersArray;
@property (strong) NSMutableArray<MessageBody*> * bodysArray;
@end

@implementation XmppMessage

- (BOOL) hasMessageType {
  return !!hasMessageType_;
}
- (void) setHasMessageType:(BOOL) _value_ {
  hasMessageType_ = !!_value_;
}
@synthesize messageType;
- (BOOL) hasClientType {
  return !!hasClientType_;
}
- (void) setHasClientType:(BOOL) _value_ {
  hasClientType_ = !!_value_;
}
@synthesize clientType;
- (BOOL) hasClientVersion {
  return !!hasClientVersion_;
}
- (void) setHasClientVersion:(BOOL) _value_ {
  hasClientVersion_ = !!_value_;
}
@synthesize clientVersion;
- (BOOL) hasNamespace {
  return !!hasNamespace_;
}
- (void) setHasNamespace:(BOOL) _value_ {
  hasNamespace_ = !!_value_;
}
@synthesize namespace;
- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) _value_ {
  hasMessageId_ = !!_value_;
}
@synthesize messageId;
- (BOOL) hasHeader {
  return !!hasHeader_;
}
- (void) setHasHeader:(BOOL) _value_ {
  hasHeader_ = !!_value_;
}
@synthesize header;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
- (BOOL) hasReceivedTime {
  return !!hasReceivedTime_;
}
- (void) setHasReceivedTime:(BOOL) _value_ {
  hasReceivedTime_ = !!_value_;
}
@synthesize receivedTime;
- (BOOL) hasTransferTime {
  return !!hasTransferTime_;
}
- (void) setHasTransferTime:(BOOL) _value_ {
  hasTransferTime_ = !!_value_;
}
@synthesize transferTime;
@synthesize headersArray;
@dynamic headers;
@synthesize bodysArray;
@dynamic bodys;
- (instancetype) init {
  if ((self = [super init])) {
    self.messageType = 0;
    self.clientType = 0;
    self.clientVersion = 0L;
    self.namespace = @"";
    self.key = @"";
    self.value = @"";
    self.messageId = @"";
    self.header = [StringHeader defaultInstance];
    self.body = [MessageBody defaultInstance];
    self.receivedTime = 0L;
    self.transferTime = 0L;
  }
  return self;
}
static XmppMessage* defaultXmppMessageInstance = nil;
+ (void) initialize {
  if (self == [XmppMessage class]) {
    defaultXmppMessageInstance = [[XmppMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXmppMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultXmppMessageInstance;
}
- (NSArray<StringHeader*> *)headers {
  return headersArray;
}
- (StringHeader*)headersAtIndex:(NSUInteger)index {
  return [headersArray objectAtIndex:index];
}
- (NSArray<MessageBody*> *)bodys {
  return bodysArray;
}
- (MessageBody*)bodysAtIndex:(NSUInteger)index {
  return [bodysArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasMessageType) {
    return NO;
  }
  if (!self.hasClientType) {
    return NO;
  }
  if (!self.hasClientVersion) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMessageType) {
    [output writeInt32:1 value:self.messageType];
  }
  if (self.hasClientType) {
    [output writeInt32:2 value:self.clientType];
  }
  if (self.hasClientVersion) {
    [output writeInt64:3 value:self.clientVersion];
  }
  if (self.hasNamespace) {
    [output writeString:4 value:self.namespace];
  }
  if (self.hasKey) {
    [output writeString:5 value:self.key];
  }
  if (self.hasValue) {
    [output writeString:6 value:self.value];
  }
  if (self.hasMessageId) {
    [output writeString:7 value:self.messageId];
  }
  if (self.hasHeader) {
    [output writeMessage:8 value:self.header];
  }
  if (self.hasBody) {
    [output writeMessage:9 value:self.body];
  }
  if (self.hasReceivedTime) {
    [output writeInt64:10 value:self.receivedTime];
  }
  if (self.hasTransferTime) {
    [output writeInt64:11 value:self.transferTime];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:12 value:element];
  }];
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:13 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMessageType) {
    size_ += computeInt32Size(1, self.messageType);
  }
  if (self.hasClientType) {
    size_ += computeInt32Size(2, self.clientType);
  }
  if (self.hasClientVersion) {
    size_ += computeInt64Size(3, self.clientVersion);
  }
  if (self.hasNamespace) {
    size_ += computeStringSize(4, self.namespace);
  }
  if (self.hasKey) {
    size_ += computeStringSize(5, self.key);
  }
  if (self.hasValue) {
    size_ += computeStringSize(6, self.value);
  }
  if (self.hasMessageId) {
    size_ += computeStringSize(7, self.messageId);
  }
  if (self.hasHeader) {
    size_ += computeMessageSize(8, self.header);
  }
  if (self.hasBody) {
    size_ += computeMessageSize(9, self.body);
  }
  if (self.hasReceivedTime) {
    size_ += computeInt64Size(10, self.receivedTime);
  }
  if (self.hasTransferTime) {
    size_ += computeInt64Size(11, self.transferTime);
  }
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(12, element);
  }];
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(13, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XmppMessage*) parseFromData:(NSData*) data {
  return (XmppMessage*)[[[XmppMessage builder] mergeFromData:data] build];
}
+ (XmppMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XmppMessage*)[[[XmppMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XmppMessage*) parseFromInputStream:(NSInputStream*) input {
  return (XmppMessage*)[[[XmppMessage builder] mergeFromInputStream:input] build];
}
+ (XmppMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XmppMessage*)[[[XmppMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XmppMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XmppMessage*)[[[XmppMessage builder] mergeFromCodedInputStream:input] build];
}
+ (XmppMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XmppMessage*)[[[XmppMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XmppMessageBuilder*) builder {
  return [[XmppMessageBuilder alloc] init];
}
+ (XmppMessageBuilder*) builderWithPrototype:(XmppMessage*) prototype {
  return [[XmppMessage builder] mergeFrom:prototype];
}
- (XmppMessageBuilder*) builder {
  return [XmppMessage builder];
}
- (XmppMessageBuilder*) toBuilder {
  return [XmppMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMessageType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageType", [NSNumber numberWithInteger:self.messageType]];
  }
  if (self.hasClientType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientType", [NSNumber numberWithInteger:self.clientType]];
  }
  if (self.hasClientVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientVersion", [NSNumber numberWithLongLong:self.clientVersion]];
  }
  if (self.hasNamespace) {
    [output appendFormat:@"%@%@: %@\n", indent, @"namespace", self.namespace];
  }
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  if (self.hasMessageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageId", self.messageId];
  }
  if (self.hasHeader) {
    [output appendFormat:@"%@%@ {\n", indent, @"header"];
    [self.header writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@ {\n", indent, @"body"];
    [self.body writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasReceivedTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"receivedTime", [NSNumber numberWithLongLong:self.receivedTime]];
  }
  if (self.hasTransferTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transferTime", [NSNumber numberWithLongLong:self.transferTime]];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"headers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bodys"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMessageType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.messageType] forKey: @"messageType"];
  }
  if (self.hasClientType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.clientType] forKey: @"clientType"];
  }
  if (self.hasClientVersion) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.clientVersion] forKey: @"clientVersion"];
  }
  if (self.hasNamespace) {
    [dictionary setObject: self.namespace forKey: @"namespace"];
  }
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  if (self.hasMessageId) {
    [dictionary setObject: self.messageId forKey: @"messageId"];
  }
  if (self.hasHeader) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.header storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"header"];
  }
  if (self.hasBody) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.body storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"body"];
  }
  if (self.hasReceivedTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.receivedTime] forKey: @"receivedTime"];
  }
  if (self.hasTransferTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.transferTime] forKey: @"transferTime"];
  }
  for (StringHeader* element in self.headersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"headers"];
  }
  for (MessageBody* element in self.bodysArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"bodys"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XmppMessage class]]) {
    return NO;
  }
  XmppMessage *otherMessage = other;
  return
      self.hasMessageType == otherMessage.hasMessageType &&
      (!self.hasMessageType || self.messageType == otherMessage.messageType) &&
      self.hasClientType == otherMessage.hasClientType &&
      (!self.hasClientType || self.clientType == otherMessage.clientType) &&
      self.hasClientVersion == otherMessage.hasClientVersion &&
      (!self.hasClientVersion || self.clientVersion == otherMessage.clientVersion) &&
      self.hasNamespace == otherMessage.hasNamespace &&
      (!self.hasNamespace || [self.namespace isEqual:otherMessage.namespace]) &&
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      self.hasMessageId == otherMessage.hasMessageId &&
      (!self.hasMessageId || [self.messageId isEqual:otherMessage.messageId]) &&
      self.hasHeader == otherMessage.hasHeader &&
      (!self.hasHeader || [self.header isEqual:otherMessage.header]) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      self.hasReceivedTime == otherMessage.hasReceivedTime &&
      (!self.hasReceivedTime || self.receivedTime == otherMessage.receivedTime) &&
      self.hasTransferTime == otherMessage.hasTransferTime &&
      (!self.hasTransferTime || self.transferTime == otherMessage.transferTime) &&
      [self.headersArray isEqualToArray:otherMessage.headersArray] &&
      [self.bodysArray isEqualToArray:otherMessage.bodysArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMessageType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.messageType] hash];
  }
  if (self.hasClientType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.clientType] hash];
  }
  if (self.hasClientVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.clientVersion] hash];
  }
  if (self.hasNamespace) {
    hashCode = hashCode * 31 + [self.namespace hash];
  }
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  if (self.hasMessageId) {
    hashCode = hashCode * 31 + [self.messageId hash];
  }
  if (self.hasHeader) {
    hashCode = hashCode * 31 + [self.header hash];
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  if (self.hasReceivedTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.receivedTime] hash];
  }
  if (self.hasTransferTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.transferTime] hash];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(StringHeader *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.bodysArray enumerateObjectsUsingBlock:^(MessageBody *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XmppMessageBuilder()
@property (strong) XmppMessage* resultXmppMessage;
@end

@implementation XmppMessageBuilder
@synthesize resultXmppMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultXmppMessage = [[XmppMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultXmppMessage;
}
- (XmppMessageBuilder*) clear {
  self.resultXmppMessage = [[XmppMessage alloc] init];
  return self;
}
- (XmppMessageBuilder*) clone {
  return [XmppMessage builderWithPrototype:resultXmppMessage];
}
- (XmppMessage*) defaultInstance {
  return [XmppMessage defaultInstance];
}
- (XmppMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XmppMessage*) buildPartial {
  XmppMessage* returnMe = resultXmppMessage;
  self.resultXmppMessage = nil;
  return returnMe;
}
- (XmppMessageBuilder*) mergeFrom:(XmppMessage*) other {
  if (other == [XmppMessage defaultInstance]) {
    return self;
  }
  if (other.hasMessageType) {
    [self setMessageType:other.messageType];
  }
  if (other.hasClientType) {
    [self setClientType:other.clientType];
  }
  if (other.hasClientVersion) {
    [self setClientVersion:other.clientVersion];
  }
  if (other.hasNamespace) {
    [self setNamespace:other.namespace];
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasHeader) {
    [self mergeHeader:other.header];
  }
  if (other.hasBody) {
    [self mergeBody:other.body];
  }
  if (other.hasReceivedTime) {
    [self setReceivedTime:other.receivedTime];
  }
  if (other.hasTransferTime) {
    [self setTransferTime:other.transferTime];
  }
  if (other.headersArray.count > 0) {
    if (resultXmppMessage.headersArray == nil) {
      resultXmppMessage.headersArray = [[NSMutableArray alloc] initWithArray:other.headersArray];
    } else {
      [resultXmppMessage.headersArray addObjectsFromArray:other.headersArray];
    }
  }
  if (other.bodysArray.count > 0) {
    if (resultXmppMessage.bodysArray == nil) {
      resultXmppMessage.bodysArray = [[NSMutableArray alloc] initWithArray:other.bodysArray];
    } else {
      [resultXmppMessage.bodysArray addObjectsFromArray:other.bodysArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XmppMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XmppMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMessageType:[input readInt32]];
        break;
      }
      case 16: {
        [self setClientType:[input readInt32]];
        break;
      }
      case 24: {
        [self setClientVersion:[input readInt64]];
        break;
      }
      case 34: {
        [self setNamespace:[input readString]];
        break;
      }
      case 42: {
        [self setKey:[input readString]];
        break;
      }
      case 50: {
        [self setValue:[input readString]];
        break;
      }
      case 58: {
        [self setMessageId:[input readString]];
        break;
      }
      case 66: {
        StringHeaderBuilder* subBuilder = [StringHeader builder];
        if (self.hasHeader) {
          [subBuilder mergeFrom:self.header];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHeader:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        if (self.hasBody) {
          [subBuilder mergeFrom:self.body];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBody:[subBuilder buildPartial]];
        break;
      }
      case 80: {
        [self setReceivedTime:[input readInt64]];
        break;
      }
      case 88: {
        [self setTransferTime:[input readInt64]];
        break;
      }
      case 98: {
        StringHeaderBuilder* subBuilder = [StringHeader builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addHeaders:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBodys:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMessageType {
  return resultXmppMessage.hasMessageType;
}
- (SInt32) messageType {
  return resultXmppMessage.messageType;
}
- (XmppMessageBuilder*) setMessageType:(SInt32) value {
  resultXmppMessage.hasMessageType = YES;
  resultXmppMessage.messageType = value;
  return self;
}
- (XmppMessageBuilder*) clearMessageType {
  resultXmppMessage.hasMessageType = NO;
  resultXmppMessage.messageType = 0;
  return self;
}
- (BOOL) hasClientType {
  return resultXmppMessage.hasClientType;
}
- (SInt32) clientType {
  return resultXmppMessage.clientType;
}
- (XmppMessageBuilder*) setClientType:(SInt32) value {
  resultXmppMessage.hasClientType = YES;
  resultXmppMessage.clientType = value;
  return self;
}
- (XmppMessageBuilder*) clearClientType {
  resultXmppMessage.hasClientType = NO;
  resultXmppMessage.clientType = 0;
  return self;
}
- (BOOL) hasClientVersion {
  return resultXmppMessage.hasClientVersion;
}
- (SInt64) clientVersion {
  return resultXmppMessage.clientVersion;
}
- (XmppMessageBuilder*) setClientVersion:(SInt64) value {
  resultXmppMessage.hasClientVersion = YES;
  resultXmppMessage.clientVersion = value;
  return self;
}
- (XmppMessageBuilder*) clearClientVersion {
  resultXmppMessage.hasClientVersion = NO;
  resultXmppMessage.clientVersion = 0L;
  return self;
}
- (BOOL) hasNamespace {
  return resultXmppMessage.hasNamespace;
}
- (NSString*) namespace {
  return resultXmppMessage.namespace;
}
- (XmppMessageBuilder*) setNamespace:(NSString*) value {
  resultXmppMessage.hasNamespace = YES;
  resultXmppMessage.namespace = value;
  return self;
}
- (XmppMessageBuilder*) clearNamespace {
  resultXmppMessage.hasNamespace = NO;
  resultXmppMessage.namespace = @"";
  return self;
}
- (BOOL) hasKey {
  return resultXmppMessage.hasKey;
}
- (NSString*) key {
  return resultXmppMessage.key;
}
- (XmppMessageBuilder*) setKey:(NSString*) value {
  resultXmppMessage.hasKey = YES;
  resultXmppMessage.key = value;
  return self;
}
- (XmppMessageBuilder*) clearKey {
  resultXmppMessage.hasKey = NO;
  resultXmppMessage.key = @"";
  return self;
}
- (BOOL) hasValue {
  return resultXmppMessage.hasValue;
}
- (NSString*) value {
  return resultXmppMessage.value;
}
- (XmppMessageBuilder*) setValue:(NSString*) value {
  resultXmppMessage.hasValue = YES;
  resultXmppMessage.value = value;
  return self;
}
- (XmppMessageBuilder*) clearValue {
  resultXmppMessage.hasValue = NO;
  resultXmppMessage.value = @"";
  return self;
}
- (BOOL) hasMessageId {
  return resultXmppMessage.hasMessageId;
}
- (NSString*) messageId {
  return resultXmppMessage.messageId;
}
- (XmppMessageBuilder*) setMessageId:(NSString*) value {
  resultXmppMessage.hasMessageId = YES;
  resultXmppMessage.messageId = value;
  return self;
}
- (XmppMessageBuilder*) clearMessageId {
  resultXmppMessage.hasMessageId = NO;
  resultXmppMessage.messageId = @"";
  return self;
}
- (BOOL) hasHeader {
  return resultXmppMessage.hasHeader;
}
- (StringHeader*) header {
  return resultXmppMessage.header;
}
- (XmppMessageBuilder*) setHeader:(StringHeader*) value {
  resultXmppMessage.hasHeader = YES;
  resultXmppMessage.header = value;
  return self;
}
- (XmppMessageBuilder*) setHeaderBuilder:(StringHeaderBuilder*) builderForValue {
  return [self setHeader:[builderForValue build]];
}
- (XmppMessageBuilder*) mergeHeader:(StringHeader*) value {
  if (resultXmppMessage.hasHeader &&
      resultXmppMessage.header != [StringHeader defaultInstance]) {
    resultXmppMessage.header =
      [[[StringHeader builderWithPrototype:resultXmppMessage.header] mergeFrom:value] buildPartial];
  } else {
    resultXmppMessage.header = value;
  }
  resultXmppMessage.hasHeader = YES;
  return self;
}
- (XmppMessageBuilder*) clearHeader {
  resultXmppMessage.hasHeader = NO;
  resultXmppMessage.header = [StringHeader defaultInstance];
  return self;
}
- (BOOL) hasBody {
  return resultXmppMessage.hasBody;
}
- (MessageBody*) body {
  return resultXmppMessage.body;
}
- (XmppMessageBuilder*) setBody:(MessageBody*) value {
  resultXmppMessage.hasBody = YES;
  resultXmppMessage.body = value;
  return self;
}
- (XmppMessageBuilder*) setBodyBuilder:(MessageBodyBuilder*) builderForValue {
  return [self setBody:[builderForValue build]];
}
- (XmppMessageBuilder*) mergeBody:(MessageBody*) value {
  if (resultXmppMessage.hasBody &&
      resultXmppMessage.body != [MessageBody defaultInstance]) {
    resultXmppMessage.body =
      [[[MessageBody builderWithPrototype:resultXmppMessage.body] mergeFrom:value] buildPartial];
  } else {
    resultXmppMessage.body = value;
  }
  resultXmppMessage.hasBody = YES;
  return self;
}
- (XmppMessageBuilder*) clearBody {
  resultXmppMessage.hasBody = NO;
  resultXmppMessage.body = [MessageBody defaultInstance];
  return self;
}
- (BOOL) hasReceivedTime {
  return resultXmppMessage.hasReceivedTime;
}
- (SInt64) receivedTime {
  return resultXmppMessage.receivedTime;
}
- (XmppMessageBuilder*) setReceivedTime:(SInt64) value {
  resultXmppMessage.hasReceivedTime = YES;
  resultXmppMessage.receivedTime = value;
  return self;
}
- (XmppMessageBuilder*) clearReceivedTime {
  resultXmppMessage.hasReceivedTime = NO;
  resultXmppMessage.receivedTime = 0L;
  return self;
}
- (BOOL) hasTransferTime {
  return resultXmppMessage.hasTransferTime;
}
- (SInt64) transferTime {
  return resultXmppMessage.transferTime;
}
- (XmppMessageBuilder*) setTransferTime:(SInt64) value {
  resultXmppMessage.hasTransferTime = YES;
  resultXmppMessage.transferTime = value;
  return self;
}
- (XmppMessageBuilder*) clearTransferTime {
  resultXmppMessage.hasTransferTime = NO;
  resultXmppMessage.transferTime = 0L;
  return self;
}
- (NSMutableArray<StringHeader*> *)headers {
  return resultXmppMessage.headersArray;
}
- (StringHeader*)headersAtIndex:(NSUInteger)index {
  return [resultXmppMessage headersAtIndex:index];
}
- (XmppMessageBuilder *)addHeaders:(StringHeader*)value {
  if (resultXmppMessage.headersArray == nil) {
    resultXmppMessage.headersArray = [[NSMutableArray alloc]init];
  }
  [resultXmppMessage.headersArray addObject:value];
  return self;
}
- (XmppMessageBuilder *)setHeadersArray:(NSArray<StringHeader*> *)array {
  resultXmppMessage.headersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (XmppMessageBuilder *)clearHeaders {
  resultXmppMessage.headersArray = nil;
  return self;
}
- (NSMutableArray<MessageBody*> *)bodys {
  return resultXmppMessage.bodysArray;
}
- (MessageBody*)bodysAtIndex:(NSUInteger)index {
  return [resultXmppMessage bodysAtIndex:index];
}
- (XmppMessageBuilder *)addBodys:(MessageBody*)value {
  if (resultXmppMessage.bodysArray == nil) {
    resultXmppMessage.bodysArray = [[NSMutableArray alloc]init];
  }
  [resultXmppMessage.bodysArray addObject:value];
  return self;
}
- (XmppMessageBuilder *)setBodysArray:(NSArray<MessageBody*> *)array {
  resultXmppMessage.bodysArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (XmppMessageBuilder *)clearBodys {
  resultXmppMessage.bodysArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
